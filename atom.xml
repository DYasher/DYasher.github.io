<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小邓同学</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="https://dyasher.github.io/atom.xml" rel="self"/>
  
  <link href="https://dyasher.github.io/"/>
  <updated>2022-10-19T13:06:29.806Z</updated>
  <id>https://dyasher.github.io/</id>
  
  <author>
    <name>小邓同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>性能测试基础知识</title>
    <link href="https://dyasher.github.io/2022/10/19/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://dyasher.github.io/2022/10/19/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2022-10-19T12:56:01.000Z</published>
    <updated>2022-10-19T13:06:29.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="性能测试基础"><a href="#性能测试基础" class="headerlink" title="性能测试基础"></a>性能测试基础</h2><h3 id="性能测试的概念"><a href="#性能测试的概念" class="headerlink" title="性能测试的概念"></a>性能测试的概念</h3><h4 id="1、为什么要学习性能测试"><a href="#1、为什么要学习性能测试" class="headerlink" title="1、为什么要学习性能测试"></a><strong>1、为什么要学习性能测试</strong></h4><ul><li><strong>业务需求</strong>、达到商用标准</li><li>比传统手工测试<strong>效益高</strong></li></ul><h4 id="2、什么是性能测试"><a href="#2、什么是性能测试" class="headerlink" title="2、什么是性能测试"></a><strong>2、什么是性能测试</strong></h4><p>使用<strong>自动化工具</strong>，模拟<strong>不同的场景</strong>，对<strong>软件各项性能指标</strong>进行测试和评估的过程。<a id="more"></a></p><h4 id="3、性能测试的目的是什么"><a href="#3、性能测试的目的是什么" class="headerlink" title="3、性能测试的目的是什么"></a><strong>3、性能测试的目的是什么</strong></h4><ul><li>评估当<strong>前系统能力</strong></li><li>寻找性能瓶颈，<strong>优化性能</strong></li><li>评估软件是否满足<strong>未来的需要</strong></li></ul><h4 id="4、能测试和功能测试对比"><a href="#4、能测试和功能测试对比" class="headerlink" title="4、能测试和功能测试对比"></a><strong>4、能测试和功能测试对比</strong></h4><p><strong>功能测试：</strong>是否满足产品功能需求规格（正向：满足要求的操作、逆向：不满足条件的操作）</p><p><strong>正向（功能）</strong>，例如：输入正确的用户名密码，登陆成功</p><p><strong>逆向（功能）</strong>，例如：输入错误的用户名密码，登陆失败给出提示</p><p><strong>性能测试：</strong>是否满足业务需求场景（时间、资源）</p><p><strong>时间：</strong>100W用户使用正确的用户名密码登陆，1秒内登陆成功</p><p><strong>资源：</strong>同时服务器CPU使用率低于70%、内存使用率低于60%等</p><p><strong>焦点不同：</strong>功能（正向、逆向）、性能（时间、资源）</p><h3 id="性能测试策略"><a href="#性能测试策略" class="headerlink" title="性能测试策略"></a>性能测试策略</h3><h4 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h4><p><strong>1、什么是基准测试</strong><br><strong>狭义：</strong>就是单用户测试。(单用户循环多次得到的数据)</p><p><img src="https://images.mmzi.online//blog/20220831/202210192016752.png" alt="image-20221019201619261"><br><strong>广义：</strong>建立<strong>基准线</strong>，当系统的<strong>软硬件环境发生变化</strong>之后再进行一次基准测试以确定变化对性能的影响。<br><img src="https://images.mmzi.online//blog/20220831/202210192017516.png" alt="image-20221019201708290"><br><strong>2、基准测试数据用途</strong><br>1）基准测试<strong>不会单独存在</strong>；<br>2）为多用户并发测试和综合场景测试等<strong>提供参考依据</strong>；<br>3）为系统/环境配置、系统优化前后的<strong>性能提升/下降提供参考指标</strong>；</p><h4 id="负载测试"><a href="#负载测试" class="headerlink" title="负载测试"></a>负载测试</h4><p><strong>1、什么是负载测试</strong><br>通过<strong>逐步增加系统负载</strong>，确定在<strong>满足系统性能指标（响应时间等）</strong>情况下，找出系统所能承受的<strong>最大负载量的测试</strong>。<br><img src="https://images.mmzi.online//blog/20220831/202210192018686.png" alt="image-20221019201842404"><br><strong>2、负载测试的作用</strong><br>系统最大负载量<strong>达到用户要求</strong>时，系统<strong>才能正式上线</strong>使用</p><h4 id="稳定性测试"><a href="#稳定性测试" class="headerlink" title="稳定性测试"></a>稳定性测试</h4><p><strong>1、什么是稳定性测试</strong><br>在服务器<strong>稳定运行（用户正常的业务负载下）</strong>的情况<strong>进行长时间测试（1天-1周等）</strong>，并最终保证服务器能<strong>满足线上业务需求</strong>。<br><img src="https://images.mmzi.online//blog/20220831/202210192019797.png" alt="image-20221019201951593"><br><strong>2、稳定性测试的作用</strong><br>系统<strong>在用户要求的业务负载下</strong>运行达到<strong>规定时间</strong>，系统才能正式上线使用</p><h4 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h4><p><strong>1、什么是压力测试</strong><br>在强负载下的测试，查看系统在<strong>峰值情况</strong>下是否存在<strong>功能隐患</strong>、系统是否有良好的<strong>容错能力</strong>和<strong>可恢复能力</strong>。<br><img src="https://images.mmzi.online//blog/20220831/202210192021780.png" alt="image-20221019202147425"><br><strong>2、压力测试场景</strong><br>1）<strong>极限负载</strong>情况下的<strong>破坏性压力测试</strong><br>2）<strong>高负载</strong>下的长时间的<strong>稳定性压力测试</strong></p><h4 id="并发测试"><a href="#并发测试" class="headerlink" title="并发测试"></a>并发测试</h4><p><strong>1、什么是并发测试</strong><br>并发测试（绝对并发）：是指在<strong>极短的时间内</strong>，发送<strong>多个请求</strong>，来验证服务器对并发的处理能力<br><img src="https://images.mmzi.online//blog/20220831/202210192022373.png" alt="image-20221019202243114"><br><strong>2、并发测试应用场景</strong><br>特定活动场景，如：抢红包、秒杀、抢购等</p><h3 id="性能测试指标"><a href="#性能测试指标" class="headerlink" title="性能测试指标"></a>性能测试指标</h3><h4 id="什么是性能测试指标"><a href="#什么是性能测试指标" class="headerlink" title="什么是性能测试指标"></a>什么是性能测试指标</h4><p>对性能测试结果进行量化衡量（响应时间、并发数、吞吐量、点击数、错误率、资源使用率）</p><h4 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h4><p><strong>什么是响应时间</strong><br>指用户从<strong>客户端发起一个请求开始</strong>，到客户端接收到从<strong>服务器端返回的结果</strong>，整改过程所耗费的时间。<br><img src="https://images.mmzi.online//blog/20220831/202210192024195.png" alt="image-20221019202401974"></p><blockquote><ul><li>不通过HTTP接口请求消息来测试</li><li>不包括 发消息时前端页面处理时间和接收到消息后前端页面 渲染显示时间 </li><li>包括服务器处理时间、网络传输时间</li></ul></blockquote><h4 id="并发数"><a href="#并发数" class="headerlink" title="并发数"></a>并发数</h4><p><strong>某一时刻</strong>同时向服务器<strong>发送请求的用户数</strong>。<br><img src="https://images.mmzi.online//blog/20220831/202210192024564.png" alt="image-20221019202440353"></p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p><strong>1、什么是吞吐量</strong><br>指的是<strong>单位时间内</strong>处理的客户端<strong>请求数</strong>，直接体现软件系统的性能承载能力。<br><img src="https://images.mmzi.online//blog/20220831/202210192025601.png" alt="image-20221019202536397"></p><p><strong>吞吐量——QPS</strong>（Query Per Second）每秒查询数：即控制服务器<strong>每秒</strong>处理的指定<strong>请求</strong>的数量。<br><img src="https://images.mmzi.online//blog/20220831/202210192026391.png" alt="image-20221019202621176"><br><strong>吞吐量——TPS</strong>（Transaction Per Second）每秒事务数：即控制服务器<strong>每秒</strong>处理的<strong>事务请求</strong>数量。<br><img src="https://images.mmzi.online//blog/20220831/202210192027560.png" alt="image-20221019202709273"></p><p><strong>2、吞吐量的单位有那些</strong></p><ul><li>从业务角度：业务数/天、访问人数/天、页面访问量/天</li><li>从网络角度：字节数/小时、字节数/天</li><li>从技术指标：每秒查询数(QPs)、每秒事务数(TPs)</li></ul><p><strong>3、QPs和TPs有什么关系</strong><br><strong>事务，即业务</strong>，一个事务可以对应一个请求/多个请求<br>一个事务对应一个请求时：TPS=QPS<br>一个事务对应n个请求时：QPS=n*TPS</p><h4 id="点击数"><a href="#点击数" class="headerlink" title="点击数"></a>点击数</h4><p><strong>1、什么是点击数</strong><br>指客户端向服务端发送请求时，所有的<strong>页面资源元素</strong>（如：图片、链接、框架css、js等资源)的<strong>请求总数量</strong>。</p><blockquote><p>只有web项目才有此指标<br>点击数不是页面上的一次点击</p></blockquote><h4 id="错误率"><a href="#错误率" class="headerlink" title="错误率"></a>错误率</h4><p><strong>1、什么是错误率</strong><br>指系统在负载情况下，失败业务的概率</p><p>错误率=(失败业务数/业务总数)*100%。</p><blockquote><ul><li>大多系统都会要求错误率无限接近于0</li><li>错误率是一个使能指标，不是功能上的随机bug</li><li>错误率是性能指标，是高负载下的失败业务的概率</li><li>随机bug是功能bug,先解决随机bug才能进行性能测试</li></ul></blockquote><h4 id="资源使用率"><a href="#资源使用率" class="headerlink" title="资源使用率"></a>资源使用率</h4><p><strong>1、什么是资源利用率</strong><br>系统各种资源的使用情况，“资源的使用量/总的资源可用量×100%“<br><strong>2、常见资源指标有哪些</strong></p><ul><li><strong>CPU</strong>使用率：不高于75%-85%</li><li><strong>内存</strong>（大小）使用率：不高于80%</li><li><strong>磁盘IO</strong>（速率）：不高于90%</li><li><strong>网络</strong>（速率）：不高于80%</li></ul><h3 id="性能测试流程"><a href="#性能测试流程" class="headerlink" title="性能测试流程"></a>性能测试流程</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p><img src="https://images.mmzi.online//blog/20220831/202210192031584.png" alt="image-20221019203114316"></p><h4 id="测试计划和方案"><a href="#测试计划和方案" class="headerlink" title="测试计划和方案"></a>测试计划和方案</h4><p><strong>1、测什么</strong></p><p>项目背景、测试目的、测试范围</p><p><strong>2、谁来测</strong></p><p>进度与分、交付清单</p><p><strong>3、怎么测</strong></p><p>测试策略</p><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><p><img src="https://images.mmzi.online//blog/20220831/202210192035769.png" alt="image-20221019203504529"></p><h4 id="测试执行"><a href="#测试执行" class="headerlink" title="测试执行"></a>测试执行</h4><p><img src="https://images.mmzi.online//blog/20220831/202210192035755.png" alt="image-20221019203556512"></p><h4 id="分析调优"><a href="#分析调优" class="headerlink" title="分析调优"></a>分析调优</h4><p><strong>调优：</strong>开发人员为主导，数据库管理员、系统管理员、网络管理员、性能测试分析人员配合；</p><p><strong>验证：</strong>性能测试人员继续进行第二轮、第三轮……的测试，与以前的测试结果进行对比，从而确认经过调整后系统的性能是否有提升；</p><blockquote><p>性能测试分析人员经过对结果分析以后，如果不符合性能需求，则会提出性能bug，然后由开发人员进行后续的调优</p></blockquote><h4 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h4><p>测试报告是对性能测试工作的总结，为软件后续验收和交付打下的基础。</p><p><strong>测试报告主要内容：</strong></p><ul><li>工作的经过回顾</li><li>缺陷分析和调优</li><li>风险评估</li><li>性能测试结果</li><li>测试工作总结与改进</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;性能测试基础&quot;&gt;&lt;a href=&quot;#性能测试基础&quot; class=&quot;headerlink&quot; title=&quot;性能测试基础&quot;&gt;&lt;/a&gt;性能测试基础&lt;/h2&gt;&lt;h3 id=&quot;性能测试的概念&quot;&gt;&lt;a href=&quot;#性能测试的概念&quot; class=&quot;headerlink&quot; title=&quot;性能测试的概念&quot;&gt;&lt;/a&gt;性能测试的概念&lt;/h3&gt;&lt;h4 id=&quot;1、为什么要学习性能测试&quot;&gt;&lt;a href=&quot;#1、为什么要学习性能测试&quot; class=&quot;headerlink&quot; title=&quot;1、为什么要学习性能测试&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、为什么要学习性能测试&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;业务需求&lt;/strong&gt;、达到商用标准&lt;/li&gt;
&lt;li&gt;比传统手工测试&lt;strong&gt;效益高&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2、什么是性能测试&quot;&gt;&lt;a href=&quot;#2、什么是性能测试&quot; class=&quot;headerlink&quot; title=&quot;2、什么是性能测试&quot;&gt;&lt;/a&gt;&lt;strong&gt;2、什么是性能测试&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;使用&lt;strong&gt;自动化工具&lt;/strong&gt;，模拟&lt;strong&gt;不同的场景&lt;/strong&gt;，对&lt;strong&gt;软件各项性能指标&lt;/strong&gt;进行测试和评估的过程。</summary>
    
    
    
    <category term="性能测试" scheme="https://dyasher.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    <category term="测试" scheme="https://dyasher.github.io/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="https://dyasher.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
    <category term="性能测试" scheme="https://dyasher.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>MonkeyScript——自动化测试进阶</title>
    <link href="https://dyasher.github.io/2022/10/18/MonkeyScript%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%BF%9B%E9%98%B6/"/>
    <id>https://dyasher.github.io/2022/10/18/MonkeyScript%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%BF%9B%E9%98%B6/</id>
    <published>2022-10-18T15:02:17.000Z</published>
    <updated>2022-10-18T15:06:04.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MonkeyScript是什么"><a href="#MonkeyScript是什么" class="headerlink" title="MonkeyScript是什么"></a>MonkeyScript是什么</h2><p><strong>MonkeyScript</strong>是monkey的脚本语言，是一组可以被Monkey识别的命令集合，可以帮助我们完成一系列被固定的重复性操作。</p><h2 id="为什么要使用MonkeyScript"><a href="#为什么要使用MonkeyScript" class="headerlink" title="为什么要使用MonkeyScript"></a>为什么要使用MonkeyScript</h2><p><strong>Monkey</strong>测试太<strong>过于随机</strong>、对主要测试模块<strong>没有针对性</strong>、执行过多<strong>无意义操作</strong>等，虽然Monkey可以忽略各种异常，但Money进程容易挂掉，对测试结果有较大的影响。针对以上问题，<strong>MonkeyScript</strong>可以让用户<strong>制定专属的脚本</strong>，更加有针对性测试对应模块。<a id="more"></a></p><h2 id="MonkeyScript使用场景"><a href="#MonkeyScript使用场景" class="headerlink" title="MonkeyScript使用场景"></a>MonkeyScript使用场景</h2><p>1）模块需要自动化测试；<br>2）改善和优化Monkey测试；<br>3）需要针对功能制定测试脚本；</p><h2 id="在什么时候用MonkeyScript"><a href="#在什么时候用MonkeyScript" class="headerlink" title="在什么时候用MonkeyScript"></a>在什么时候用MonkeyScript</h2><p>1）当模块进行了一轮Monkey测试后再按模块主要功能制定针对性测试脚本进行测试；<br>2）当模块是关联型模块，例如：手机中的密码保险箱，这种类型的模块存在关联性，需要和其他模块关联测试，除了模块本身的主要功能，还要制定和其他模块关联场景测试脚本；</p><h2 id="怎样使用"><a href="#怎样使用" class="headerlink" title="怎样使用"></a>怎样使用</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>运行脚本命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -f &lt;scriptfile&gt; &lt;event-count&gt;</span><br></pre></td></tr></table></figure><p>1）scriptfile：script后缀脚本文件<br>2）event-count：脚本运行次数</p><p>使用adb命令将脚本push至手机中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push D:\pdf\monkey\monkey.script /sdcard/</span><br></pre></td></tr></table></figure><p>执行monkey命令，比如执行2次</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -f /sdcard/monkey.script 2</span><br></pre></td></tr></table></figure><h3 id="脚本格式"><a href="#脚本格式" class="headerlink" title="脚本格式"></a>脚本格式</h3><p>Monkey的Script有一个固定编码格式要求，文件头如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Start of Script</span>  </span><br><span class="line">type= user  </span><br><span class="line">count= 1  </span><br><span class="line">speed= 1.0  </span><br><span class="line">start data &gt;&gt;</span><br></pre></td></tr></table></figure><p>启动测试程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动应用跳转至目标界面</span></span><br><span class="line">LaunchActivity(me.peace.ka,me.peace.ka.MainActivity)</span><br></pre></td></tr></table></figure><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><p><strong>1、点击事件（DispatchPointer）</strong><br>DispatchPointer 命令用于向一个指定的坐标位置，发送单个手势消息，一般用它来模拟点击的操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DispatchPointer ( downTime , eventTime , action , x , y , pressure , size , metaState , xPrecision , yPrecision , device , edgeFlags)</span><br></pre></td></tr></table></figure><p>1）只需要关注action 、 x 、y 三个参数即可；</p><p>2）action ：事件是按下还是抬起，0 表示按下，1 表示抬起；</p><p>3）x、y：表示当前事件触发的X轴和Y轴的坐标；</p><blockquote><p>也就是说，两个 DispatchPointer 命令加在一起，分别表示 按下 和 抬起 ，这表示一次点击操作，其余的参数，统一设置为 0 即可。</p></blockquote><p><strong>2、按键事件（DispatchKey）</strong><br>DispatchKey 主要是用于发送一些 Android 标准的 EventKey 按键消息。但是需要写对应的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DiapatchKey ( downTime ,eventTime ,action ,code ,repeat ,metaState ,device ,scancode)</span><br></pre></td></tr></table></figure><p>1）只需要关注，action、code、repeat即可；</p><p>2）action ： 消息的类型。0 表示按下，1 表示抬起；</p><p>3）code：按键的值。参考KeyEvent；</p><p>4）repeat：按键重复的次数；</p><blockquote><p>具体的键值，可以通过官网查询：<a href="https://developer.android.com/reference/android/view/KeyEvent.html">https://developer.android.com/reference/android/view/KeyEvent.html</a></p></blockquote><p><strong>3、轨迹球（DispatchTrackball）</strong><br>DispatchTrackball 命令用于像一个指定位置发送单个轨迹球的消息。它的方法前面也与 DispatchPointer 一样。</p><p><strong>4、 旋转屏幕（RotateScreen）</strong><br>RotateScreen 命令用于发送旋转测试设备屏幕方式的事件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RotateScreen ( rotationDegree , persist)</span><br></pre></td></tr></table></figure><p>1）rotateDegree：旋转的角度；</p><p>2）persist：是否保持旋转前的状态。0 为不保持，1 为保持；</p><blockquote><p>rotateDegree，可配置的角度可以参考 android.view.Surface里的常量进行配置，可选的角度有 4 个：ROTATION_0、ROTATION_90、ROTATION_180、ROTATION_270</p></blockquote><p><strong>5、软键盘开关（DispatchFlip）</strong><br>DispatchFlip 命令用于打开或者关闭软键盘。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DispatchFlip (keyboardOpen)</span><br></pre></td></tr></table></figure><p>1）其中的参数，true 表示打开，false 表示关闭；</p><p><strong>6、键盘事件（DispatchPress）</strong><br>DispatchPress 命令用于模拟敲击键盘的事件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DispatchPress( keyName )</span><br></pre></td></tr></table></figure><p><strong>7、启动Activity（LaunchActivity）</strong><br>LaunchActivity 命令用于打开任意应用的一个页面，但是前提条件是打开的Activity 需要属性 android:exported 被设定为true，才可以通过 LaunchActivity 打开。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LaunchActivity ( pkg_name , act_name )</span><br></pre></td></tr></table></figure><p>1）打开的 App 的包名；<br>2）打开的 Activity 的名称；</p><p><strong>8、等待（UserWait）</strong><br>UserWait 命令用于让脚本中断执行一段时间。因为是脚本执行，多个事件之间执行的速度会非常的快，有时候我们需要等待一些事件触发之后的结果返回，需要等待一段时间之后，再继续执行脚本，这个时候就可以使用 UserWait 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserWait ( sleepTime )</span><br></pre></td></tr></table></figure><p>1）sleepTime 的单位是毫秒；</p><p><strong>9、输入字符串(DispatchString)</strong><br>DispatchString 命令用于向 Shell 输入一个字符串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DispatchString( input )</span><br></pre></td></tr></table></figure><ol><li>input 就是一个字符串即可，但是 MS 对中文的支持并不好，所以尽量输入英文的测试数据；</li></ol><p><strong>10、长按（LongPress）</strong><br>LongPress 命令用于模拟长按时间，标准为长按 2s 。它是一个无参的方法，直接调用即可。</p><p><strong>11、运行 Shell 命令（RunCmd）</strong><br>RunCmd 命令用于在设备上运行 shell 命令。当然这些 shell 命令必须是当前待测试设备支持的 shell 命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RunCmd ( cmd )  </span><br></pre></td></tr></table></figure><p>1）参数 cmd 就是需要执行的 shell 命令；</p><p><strong>12、手指单击（Tap）</strong><br>Tap 命令用于模拟一次手指单击事件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tap( x ,y ,tapDuration)</span><br></pre></td></tr></table></figure><p>1)tapDuration 参数，表示当前单击的持续时间，可选参数;</p><p><strong>13、唤醒设备并解锁（DeviceWakeUp）</strong><br>DeviceWakeUp 命令可以唤醒设备，并进行解锁。当然需要是一个无加密的设备才可以，有数字密码或者图形密码，都会导致失败。</p><p><strong>14、等待5s（ProfileWait）</strong><br>ProfileWait 命令和 UserWait 类似，但是它已经设定好等待的时长，就是 5s ，直接调用即可。</p><p><strong>15、长按消息（PressAndHold）</strong><br>PressAndHold 命令用于模拟一个长按事件，和 LongPress 类似，但是它是可以定制长按时长的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PressAndHold( x, y, pressDuration)</span><br></pre></td></tr></table></figure><p><strong>16、拖拽（Drag）</strong><br>Drag 命令用于模拟一个按住拖拽的动作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Drag( xStart, yStart, xEnd, yEnd, stepCount)</span><br></pre></td></tr></table></figure><p>1）前面四个参数分别表示了事件开始的坐标点，和结束的坐标点；<br>2）stepCount ，因为拖拽事件是一组连续的事件，这个参数可以指定当前拖拽事件，是由多少个小事件组成的，越多，越连贯；</p><p><strong>17、缩放事件（PinchZoom）</strong><br>PinchZoom 命令用于模拟缩放手势。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PinchZoom( pt1xStart, pt1yStart, pt1xEnd, pt1yEnd, pt2xStart, pt2yStart, pt2xEnd, pt2yEnd, stepCount)</span><br></pre></td></tr></table></figure><p>它的参数分别表示了两个手指的开始位置和结束位置，并且设定了完成了多少次缩放操作。</p><h3 id="例子示范"><a href="#例子示范" class="headerlink" title="例子示范"></a>例子示范</h3><p>1、打开UI Automator View这个工具，点击左上的手机图标；<br>2、可获取当前手机屏幕图，选择屏幕图中的控件，则会在右侧展示这个控件对应的布局信息和一些属性信息；<br>3、比如这个选择了Receiver广播，右侧信息告诉这个位于RecyclerView中，是其中的一个item并且是个TextView控件，而bounds[48,377][325,442]这项属性告诉这个TextView的边框位置左上角起始点是(48,377),右下角结束点是(325,442)；<br>4、之前提到的轨迹球事件、点击事件需要中这个范围选取一个点来操作，即参数x，y。比如选择点(100,400)，这个点位于这个TextView之内；</p><p><img src="https://images.mmzi.online//blog/20220831/202210182233943.webp" alt="1858781-4c033bf8aa7678e1"><br><img src="https://images.mmzi.online//blog/20220831/202210182233689.webp" alt="1858781-9109f630e2cf57b9"></p><p>5、参照如上的图，我们现在需要通过monkey script来模拟操作一系列事件<br>1)打开这个应用；<br>2)点击Receiver广播；<br>3)点击REGISTER A RECEIVER；<br>4)编辑框输入Hello；<br>5)点击SEND A RECEIVER；<br>6)点击UNREGISTER A RECEIVER；<br>7)点击CLEAR清空编辑框；<br>8)返回退出回到首页；</p><p><strong>脚本实现</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">typ=user</span><br><span class="line">count=10</span><br><span class="line">speed=1.0</span><br><span class="line">start data &gt;&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">启动应用跳转至目标界面</span></span><br><span class="line">LaunchActivity(me.peace.ka,me.peace.ka.MainActivity)</span><br><span class="line">UserWait(2000)</span><br><span class="line"><span class="meta">#</span><span class="bash">点击Receiver广播</span></span><br><span class="line">DispatchPointer(10,10,0,100,400,1,1,-1,1,1,0,0)</span><br><span class="line">DispatchPointer(10,10,1,100,400,1,1,-1,1,1,0,0)</span><br><span class="line">UserWait(1500)</span><br><span class="line"><span class="meta">#</span><span class="bash">点击REGISTER A RECEIVER</span></span><br><span class="line">DispatchPointer(10,10,0,100,600,1,1,-1,1,1,0,0)</span><br><span class="line">DispatchPointer(10,10,1,100,600,1,1,-1,1,1,0,0)</span><br><span class="line">UserWait(1500)</span><br><span class="line"><span class="meta">#</span><span class="bash">点击编辑框</span></span><br><span class="line">DispatchPointer(10,10,0,60,300,1,1,-1,1,1,0,0)</span><br><span class="line">DispatchPointer(10,10,1,60,300,1,1,-1,1,1,0,0)</span><br><span class="line"><span class="meta">#</span><span class="bash">输入Hello</span></span><br><span class="line">DispatchString(Hello)</span><br><span class="line">UserWait(1000)</span><br><span class="line"><span class="meta">#</span><span class="bash">返回键隐藏键盘</span></span><br><span class="line">DispatchPress(4)</span><br><span class="line">UserWait(1000)</span><br><span class="line"><span class="meta">#</span><span class="bash">点击SEND A RECEIVER</span></span><br><span class="line">DispatchPointer(10,10,0,100,400,1,1,-1,1,1,0,0)</span><br><span class="line">DispatchPointer(10,10,1,100,400,1,1,-1,1,1,0,0)</span><br><span class="line">UserWait(1500)</span><br><span class="line"><span class="meta">#</span><span class="bash">点击UNREGISTER A RECEIVER</span></span><br><span class="line">DispatchPointer(10,10,0,100,800,1,1,-1,1,1,0,0)</span><br><span class="line">DispatchPointer(10,10,1,100,800,1,1,-1,1,1,0,0)</span><br><span class="line">UserWait(1500)</span><br><span class="line"><span class="meta">#</span><span class="bash">点击CLEAR</span></span><br><span class="line">DispatchPointer(10,10,0,100,900,1,1,-1,1,1,0,0)</span><br><span class="line">DispatchPointer(10,10,1,100,900,1,1,-1,1,1,0,0)</span><br><span class="line">UserWait(5000)</span><br><span class="line"><span class="meta">#</span><span class="bash">返回键返回上级页面</span></span><br><span class="line">DispatchPress(4)</span><br><span class="line">UserWait(5000)</span><br><span class="line"><span class="meta">#</span><span class="bash">返回键退出应用</span></span><br><span class="line">DispatchPress(4)</span><br><span class="line">UserWait(5000)</span><br></pre></td></tr></table></figure><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p>Automator View工具部署的坑比较多，经过摸索最后采用手机设备自带的开发者模式中的输入-指针位置可以定位到坐标，这样更快更准确得到坐标。</p><h3 id="附录二《KEYCODE列表》"><a href="#附录二《KEYCODE列表》" class="headerlink" title="附录二《KEYCODE列表》"></a>附录二《KEYCODE列表》</h3><p><img src="https://images.mmzi.online//blog/20220831/202210182238342.png" alt="image-20221018223817222"></p><p><img src="https://images.mmzi.online//blog/20220831/202210182238059.png" alt="image-20221018223843951"></p><p><img src="https://images.mmzi.online//blog/20220831/202210182239954.png" alt="image-20221018223957838"></p><p><img src="https://images.mmzi.online//blog/20220831/202210182240879.png" alt="image-20221018224020768"></p><h3 id="附录一《API源码》"><a href="#附录一《API源码》" class="headerlink" title="附录一《API源码》"></a>附录一《API源码》</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2008 The Android Open Source Project</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.android.commands.monkey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ComponentName;</span><br><span class="line"><span class="keyword">import</span> android.os.SystemClock;</span><br><span class="line"><span class="keyword">import</span> android.view.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.Surface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * monkey event queue. It takes a script to produce events sample script format:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * type= raw events</span></span><br><span class="line"><span class="comment"> * count= 10</span></span><br><span class="line"><span class="comment"> * speed= 1.0</span></span><br><span class="line"><span class="comment"> * start data &gt;&gt;</span></span><br><span class="line"><span class="comment"> * captureDispatchPointer(5109520,5109520,0,230.75429,458.1814,0.20784314,0.06666667,0,0.0,0.0,65539,0)</span></span><br><span class="line"><span class="comment"> * captureDispatchKey(5113146,5113146,0,20,0,0,0,0)</span></span><br><span class="line"><span class="comment"> * captureDispatchFlip(true)</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonkeySourceScript</span> <span class="keyword">implements</span> <span class="title">MonkeyEventSource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mEventCountInScript = <span class="number">0</span>; <span class="comment">// total number of events in the file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mVerbose = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> mSpeed = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mScriptFileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MonkeyEventQueue mQ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_COUNT = <span class="string">&quot;count=&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_SPEED = <span class="string">&quot;speed=&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mLastRecordedDownTimeKey = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mLastRecordedDownTimeMotion = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mLastExportDownTimeKey = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mLastExportDownTimeMotion = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mLastExportEventTime = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mLastRecordedEventTime = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// process scripts in line-by-line mode (true) or batch processing mode (false)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mReadScriptLineByLine = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> THIS_DEBUG = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a parameter that compensates the difference of real elapsed time and</span></span><br><span class="line">    <span class="comment">// time in theory</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SLEEP_COMPENSATE_DIFF = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if this header is present, scripts are read and processed in line-by-line mode</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_LINE_BY_LINE = <span class="string">&quot;linebyline&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// maximum number of events that we read at one time</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ONE_TIME_READS = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// event key word in the capture log</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_POINTER = <span class="string">&quot;DispatchPointer&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_TRACKBALL = <span class="string">&quot;DispatchTrackball&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_ROTATION = <span class="string">&quot;RotateScreen&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_KEY = <span class="string">&quot;DispatchKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_FLIP = <span class="string">&quot;DispatchFlip&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_KEYPRESS = <span class="string">&quot;DispatchPress&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_ACTIVITY = <span class="string">&quot;LaunchActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_INSTRUMENTATION = <span class="string">&quot;LaunchInstrumentation&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_WAIT = <span class="string">&quot;UserWait&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_LONGPRESS = <span class="string">&quot;LongPress&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_POWERLOG = <span class="string">&quot;PowerLog&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_WRITEPOWERLOG = <span class="string">&quot;WriteLog&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_RUNCMD = <span class="string">&quot;RunCmd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_TAP = <span class="string">&quot;Tap&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_PROFILE_WAIT = <span class="string">&quot;ProfileWait&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_DEVICE_WAKEUP = <span class="string">&quot;DeviceWakeUp&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_INPUT_STRING = <span class="string">&quot;DispatchString&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_PRESSANDHOLD = <span class="string">&quot;PressAndHold&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_DRAG = <span class="string">&quot;Drag&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_PINCH_ZOOM = <span class="string">&quot;PinchZoom&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_START_FRAMERATE_CAPTURE = <span class="string">&quot;StartCaptureFramerate&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_END_FRAMERATE_CAPTURE = <span class="string">&quot;EndCaptureFramerate&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_START_APP_FRAMERATE_CAPTURE =</span><br><span class="line">            <span class="string">&quot;StartCaptureAppFramerate&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_KEYWORD_END_APP_FRAMERATE_CAPTURE = <span class="string">&quot;EndCaptureAppFramerate&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a line at the end of the header</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String STARTING_DATA_LINE = <span class="string">&quot;start data &gt;&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mFileOpened = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> LONGPRESS_WAIT_TIME = <span class="number">2000</span>; <span class="comment">// wait time for the long</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mProfileWaitTime = <span class="number">5000</span>; <span class="comment">//Wait time for each user profile</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mDeviceSleepTime = <span class="number">30000</span>; <span class="comment">//Device sleep time</span></span><br><span class="line"></span><br><span class="line">    FileInputStream mFStream;</span><br><span class="line"></span><br><span class="line">    DataInputStream mInputStream;</span><br><span class="line"></span><br><span class="line">    BufferedReader mBufferedReader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// X and Y coordincates of last touch event. Array Index is the pointerId</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mLastX[] = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mLastY[] = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mScriptStartTime = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mMonkeyStartTime = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a MonkeySourceScript instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename The filename of the script (on the device).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> throttle The amount of time in ms to sleep between events.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MonkeySourceScript</span><span class="params">(Random random, String filename, <span class="keyword">long</span> throttle,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> randomizeThrottle, <span class="keyword">long</span> profileWaitTime, <span class="keyword">long</span> deviceSleepTime)</span> </span>&#123;</span><br><span class="line">        mScriptFileName = filename;</span><br><span class="line">        mQ = <span class="keyword">new</span> MonkeyEventQueue(random, throttle, randomizeThrottle);</span><br><span class="line">        mProfileWaitTime = profileWaitTime;</span><br><span class="line">        mDeviceSleepTime = deviceSleepTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Resets the globals used to timeshift events.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mLastRecordedDownTimeKey = <span class="number">0</span>;</span><br><span class="line">        mLastRecordedDownTimeMotion = <span class="number">0</span>;</span><br><span class="line">        mLastRecordedEventTime = -<span class="number">1</span>;</span><br><span class="line">        mLastExportDownTimeKey = <span class="number">0</span>;</span><br><span class="line">        mLastExportDownTimeMotion = <span class="number">0</span>;</span><br><span class="line">        mLastExportEventTime = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reads the header of the script file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if the file header could be parsed, and false otherwise.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException If there was an error reading the file.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">readHeader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        mFileOpened = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        mFStream = <span class="keyword">new</span> FileInputStream(mScriptFileName);</span><br><span class="line">        mInputStream = <span class="keyword">new</span> DataInputStream(mFStream);</span><br><span class="line">        mBufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(mInputStream));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((line = mBufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            line = line.trim();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (line.indexOf(HEADER_COUNT) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String value = line.substring(HEADER_COUNT.length() + <span class="number">1</span>).trim();</span><br><span class="line">                    mEventCountInScript = Integer.parseInt(value);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                    System.err.println(e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line.indexOf(HEADER_SPEED) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String value = line.substring(HEADER_COUNT.length() + <span class="number">1</span>).trim();</span><br><span class="line">                    mSpeed = Double.parseDouble(value);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                    System.err.println(e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line.indexOf(HEADER_LINE_BY_LINE) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                mReadScriptLineByLine = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line.indexOf(STARTING_DATA_LINE) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reads a number of lines and passes the lines to be processed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The number of lines read.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException If there was an error reading the file.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">readLines</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_ONE_TIME_READS; i++) &#123;</span><br><span class="line">            line = mBufferedReader.readLine();</span><br><span class="line">            <span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            line.trim();</span><br><span class="line">            processLine(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MAX_ONE_TIME_READS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Reads one line and processes it.</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> the number of lines read</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@throws</span> IOException If there was an error reading the file.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">readOneLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String line = mBufferedReader.readLine();</span><br><span class="line">        <span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        line.trim();</span><br><span class="line">        processLine(line);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an event and adds it to the event queue. If the parameters are</span></span><br><span class="line"><span class="comment">     * not understood, they are ignored and no events are added.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s The entire string from the script file.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args An array of arguments extracted from the script file line.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleEvent</span><span class="params">(String s, String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Handle key event</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_KEY) &gt;= <span class="number">0</span> &amp;&amp; args.length == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot; old key\n&quot;</span>);</span><br><span class="line">                <span class="keyword">long</span> downTime = Long.parseLong(args[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">long</span> eventTime = Long.parseLong(args[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">int</span> action = Integer.parseInt(args[<span class="number">2</span>]);</span><br><span class="line">                <span class="keyword">int</span> code = Integer.parseInt(args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">int</span> repeat = Integer.parseInt(args[<span class="number">4</span>]);</span><br><span class="line">                <span class="keyword">int</span> metaState = Integer.parseInt(args[<span class="number">5</span>]);</span><br><span class="line">                <span class="keyword">int</span> device = Integer.parseInt(args[<span class="number">6</span>]);</span><br><span class="line">                <span class="keyword">int</span> scancode = Integer.parseInt(args[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">                MonkeyKeyEvent e = <span class="keyword">new</span> MonkeyKeyEvent(downTime, eventTime, action, code, repeat,</span><br><span class="line">                        metaState, device, scancode);</span><br><span class="line">                System.out.println(<span class="string">&quot; Key code &quot;</span> + code + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                mQ.addLast(e);</span><br><span class="line">                System.out.println(<span class="string">&quot;Added key up \n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle trackball or pointer events</span></span><br><span class="line">        <span class="keyword">if</span> ((s.indexOf(EVENT_KEYWORD_POINTER) &gt;= <span class="number">0</span> || s.indexOf(EVENT_KEYWORD_TRACKBALL) &gt;= <span class="number">0</span>)</span><br><span class="line">                &amp;&amp; args.length == <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> downTime = Long.parseLong(args[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">long</span> eventTime = Long.parseLong(args[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">int</span> action = Integer.parseInt(args[<span class="number">2</span>]);</span><br><span class="line">                <span class="keyword">float</span> x = Float.parseFloat(args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">float</span> y = Float.parseFloat(args[<span class="number">4</span>]);</span><br><span class="line">                <span class="keyword">float</span> pressure = Float.parseFloat(args[<span class="number">5</span>]);</span><br><span class="line">                <span class="keyword">float</span> size = Float.parseFloat(args[<span class="number">6</span>]);</span><br><span class="line">                <span class="keyword">int</span> metaState = Integer.parseInt(args[<span class="number">7</span>]);</span><br><span class="line">                <span class="keyword">float</span> xPrecision = Float.parseFloat(args[<span class="number">8</span>]);</span><br><span class="line">                <span class="keyword">float</span> yPrecision = Float.parseFloat(args[<span class="number">9</span>]);</span><br><span class="line">                <span class="keyword">int</span> device = Integer.parseInt(args[<span class="number">10</span>]);</span><br><span class="line">                <span class="keyword">int</span> edgeFlags = Integer.parseInt(args[<span class="number">11</span>]);</span><br><span class="line"></span><br><span class="line">                MonkeyMotionEvent e;</span><br><span class="line">                <span class="keyword">if</span> (s.indexOf(<span class="string">&quot;Pointer&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    e = <span class="keyword">new</span> MonkeyTouchEvent(action);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    e = <span class="keyword">new</span> MonkeyTrackballEvent(action);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                e.setDownTime(downTime)</span><br><span class="line">                        .setEventTime(eventTime)</span><br><span class="line">                        .setMetaState(metaState)</span><br><span class="line">                        .setPrecision(xPrecision, yPrecision)</span><br><span class="line">                        .setDeviceId(device)</span><br><span class="line">                        .setEdgeFlags(edgeFlags)</span><br><span class="line">                        .addPointer(<span class="number">0</span>, x, y, pressure, size);</span><br><span class="line">                mQ.addLast(e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle trackball or multi-touch  pointer events. pointer ID is the 13th parameter</span></span><br><span class="line">        <span class="keyword">if</span> ((s.indexOf(EVENT_KEYWORD_POINTER) &gt;= <span class="number">0</span> || s.indexOf(EVENT_KEYWORD_TRACKBALL) &gt;= <span class="number">0</span>)</span><br><span class="line">                &amp;&amp; args.length == <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> downTime = Long.parseLong(args[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">long</span> eventTime = Long.parseLong(args[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">int</span> action = Integer.parseInt(args[<span class="number">2</span>]);</span><br><span class="line">                <span class="keyword">float</span> x = Float.parseFloat(args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">float</span> y = Float.parseFloat(args[<span class="number">4</span>]);</span><br><span class="line">                <span class="keyword">float</span> pressure = Float.parseFloat(args[<span class="number">5</span>]);</span><br><span class="line">                <span class="keyword">float</span> size = Float.parseFloat(args[<span class="number">6</span>]);</span><br><span class="line">                <span class="keyword">int</span> metaState = Integer.parseInt(args[<span class="number">7</span>]);</span><br><span class="line">                <span class="keyword">float</span> xPrecision = Float.parseFloat(args[<span class="number">8</span>]);</span><br><span class="line">                <span class="keyword">float</span> yPrecision = Float.parseFloat(args[<span class="number">9</span>]);</span><br><span class="line">                <span class="keyword">int</span> device = Integer.parseInt(args[<span class="number">10</span>]);</span><br><span class="line">                <span class="keyword">int</span> edgeFlags = Integer.parseInt(args[<span class="number">11</span>]);</span><br><span class="line">                <span class="keyword">int</span> pointerId = Integer.parseInt(args[<span class="number">12</span>]);</span><br><span class="line"></span><br><span class="line">                MonkeyMotionEvent e;</span><br><span class="line">                <span class="keyword">if</span> (s.indexOf(<span class="string">&quot;Pointer&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (action == MotionEvent.ACTION_POINTER_DOWN) &#123;</span><br><span class="line">                        e = <span class="keyword">new</span> MonkeyTouchEvent(MotionEvent.ACTION_POINTER_DOWN</span><br><span class="line">                                | (pointerId &lt;&lt; MotionEvent.ACTION_POINTER_INDEX_SHIFT))</span><br><span class="line">                                        .setIntermediateNote(<span class="keyword">true</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        e = <span class="keyword">new</span> MonkeyTouchEvent(action);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (mScriptStartTime &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        mMonkeyStartTime = SystemClock.uptimeMillis();</span><br><span class="line">                        mScriptStartTime = eventTime;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    e = <span class="keyword">new</span> MonkeyTrackballEvent(action);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pointerId == <span class="number">1</span>) &#123;</span><br><span class="line">                    e.setDownTime(downTime)</span><br><span class="line">                            .setEventTime(eventTime)</span><br><span class="line">                            .setMetaState(metaState)</span><br><span class="line">                            .setPrecision(xPrecision, yPrecision)</span><br><span class="line">                            .setDeviceId(device)</span><br><span class="line">                            .setEdgeFlags(edgeFlags)</span><br><span class="line">                            .addPointer(<span class="number">0</span>, mLastX[<span class="number">0</span>], mLastY[<span class="number">0</span>], pressure, size)</span><br><span class="line">                            .addPointer(<span class="number">1</span>, x, y, pressure, size);</span><br><span class="line">                    mLastX[<span class="number">1</span>] = x;</span><br><span class="line">                    mLastY[<span class="number">1</span>] = y;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pointerId == <span class="number">0</span>) &#123;</span><br><span class="line">                    e.setDownTime(downTime)</span><br><span class="line">                            .setEventTime(eventTime)</span><br><span class="line">                            .setMetaState(metaState)</span><br><span class="line">                            .setPrecision(xPrecision, yPrecision)</span><br><span class="line">                            .setDeviceId(device)</span><br><span class="line">                            .setEdgeFlags(edgeFlags)</span><br><span class="line">                            .addPointer(<span class="number">0</span>, x, y, pressure, size);</span><br><span class="line">                     <span class="keyword">if</span>(action == MotionEvent.ACTION_POINTER_UP) &#123;</span><br><span class="line">                         e.addPointer(<span class="number">1</span>, mLastX[<span class="number">1</span>], mLastY[<span class="number">1</span>]);</span><br><span class="line">                     &#125;</span><br><span class="line">                     mLastX[<span class="number">0</span>] = x;</span><br><span class="line">                     mLastY[<span class="number">0</span>] = y;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Dynamically adjust waiting time to ensure that simulated evnets follow</span></span><br><span class="line">                <span class="comment">// the time tap specified in the script</span></span><br><span class="line">                <span class="keyword">if</span> (mReadScriptLineByLine) &#123;</span><br><span class="line">                    <span class="keyword">long</span> curUpTime = SystemClock.uptimeMillis();</span><br><span class="line">                    <span class="keyword">long</span> realElapsedTime = curUpTime - mMonkeyStartTime;</span><br><span class="line">                    <span class="keyword">long</span> scriptElapsedTime = eventTime - mScriptStartTime;</span><br><span class="line">                    <span class="keyword">if</span> (realElapsedTime &lt; scriptElapsedTime) &#123;</span><br><span class="line">                        <span class="keyword">long</span> waitDuration = scriptElapsedTime - realElapsedTime;</span><br><span class="line">                        mQ.addLast(<span class="keyword">new</span> MonkeyWaitEvent(waitDuration));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                mQ.addLast(e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle screen rotation events</span></span><br><span class="line">        <span class="keyword">if</span> ((s.indexOf(EVENT_KEYWORD_ROTATION) &gt;= <span class="number">0</span>) &amp;&amp; args.length == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> rotationDegree = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">int</span> persist = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> ((rotationDegree == Surface.ROTATION_0) ||</span><br><span class="line">                    (rotationDegree == Surface.ROTATION_90) ||</span><br><span class="line">                    (rotationDegree == Surface.ROTATION_180) ||</span><br><span class="line">                    (rotationDegree == Surface.ROTATION_270)) &#123;</span><br><span class="line">                    mQ.addLast(<span class="keyword">new</span> MonkeyRotationEvent(rotationDegree,</span><br><span class="line">                                                       persist != <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle tap event</span></span><br><span class="line">        <span class="keyword">if</span> ((s.indexOf(EVENT_KEYWORD_TAP) &gt;= <span class="number">0</span>) &amp;&amp; args.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">float</span> x = Float.parseFloat(args[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">float</span> y = Float.parseFloat(args[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">long</span> tapDuration = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (args.length == <span class="number">3</span>) &#123;</span><br><span class="line">                    tapDuration = Long.parseLong(args[<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Set the default parameters</span></span><br><span class="line">                <span class="keyword">long</span> downTime = SystemClock.uptimeMillis();</span><br><span class="line">                MonkeyMotionEvent e1 = <span class="keyword">new</span> MonkeyTouchEvent(MotionEvent.ACTION_DOWN)</span><br><span class="line">                        .setDownTime(downTime)</span><br><span class="line">                        .setEventTime(downTime)</span><br><span class="line">                        .addPointer(<span class="number">0</span>, x, y, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">                mQ.addLast(e1);</span><br><span class="line">                <span class="keyword">if</span> (tapDuration &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    mQ.addLast(<span class="keyword">new</span> MonkeyWaitEvent(tapDuration));</span><br><span class="line">                &#125;</span><br><span class="line">                MonkeyMotionEvent e2 = <span class="keyword">new</span> MonkeyTouchEvent(MotionEvent.ACTION_UP)</span><br><span class="line">                        .setDownTime(downTime)</span><br><span class="line">                        .setEventTime(downTime)</span><br><span class="line">                        .addPointer(<span class="number">0</span>, x, y, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">                mQ.addLast(e2);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;// &quot;</span> + e.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Handle the press and hold</span></span><br><span class="line">        <span class="keyword">if</span> ((s.indexOf(EVENT_KEYWORD_PRESSANDHOLD) &gt;= <span class="number">0</span>) &amp;&amp; args.length == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">float</span> x = Float.parseFloat(args[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">float</span> y = Float.parseFloat(args[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">long</span> pressDuration = Long.parseLong(args[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Set the default parameters</span></span><br><span class="line">                <span class="keyword">long</span> downTime = SystemClock.uptimeMillis();</span><br><span class="line"></span><br><span class="line">                MonkeyMotionEvent e1 = <span class="keyword">new</span> MonkeyTouchEvent(MotionEvent.ACTION_DOWN)</span><br><span class="line">                        .setDownTime(downTime)</span><br><span class="line">                        .setEventTime(downTime)</span><br><span class="line">                        .addPointer(<span class="number">0</span>, x, y, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">                MonkeyWaitEvent e2 = <span class="keyword">new</span> MonkeyWaitEvent(pressDuration);</span><br><span class="line">                MonkeyMotionEvent e3 = <span class="keyword">new</span> MonkeyTouchEvent(MotionEvent.ACTION_UP)</span><br><span class="line">                        .setDownTime(downTime + pressDuration)</span><br><span class="line">                        .setEventTime(downTime + pressDuration)</span><br><span class="line">                        .addPointer(<span class="number">0</span>, x, y, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">                mQ.addLast(e1);</span><br><span class="line">                mQ.addLast(e2);</span><br><span class="line">                mQ.addLast(e2);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;// &quot;</span> + e.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle drag event</span></span><br><span class="line">        <span class="keyword">if</span> ((s.indexOf(EVENT_KEYWORD_DRAG) &gt;= <span class="number">0</span>) &amp;&amp; args.length == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> xStart = Float.parseFloat(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">float</span> yStart = Float.parseFloat(args[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">float</span> xEnd = Float.parseFloat(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">float</span> yEnd = Float.parseFloat(args[<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">int</span> stepCount = Integer.parseInt(args[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> x = xStart;</span><br><span class="line">            <span class="keyword">float</span> y = yStart;</span><br><span class="line">            <span class="keyword">long</span> downTime = SystemClock.uptimeMillis();</span><br><span class="line">            <span class="keyword">long</span> eventTime = SystemClock.uptimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (stepCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">float</span> xStep = (xEnd - xStart) / stepCount;</span><br><span class="line">                <span class="keyword">float</span> yStep = (yEnd - yStart) / stepCount;</span><br><span class="line"></span><br><span class="line">                MonkeyMotionEvent e =</span><br><span class="line">                        <span class="keyword">new</span> MonkeyTouchEvent(MotionEvent.ACTION_DOWN).setDownTime(downTime)</span><br><span class="line">                                .setEventTime(eventTime).addPointer(<span class="number">0</span>, x, y, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">                mQ.addLast(e);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stepCount; ++i) &#123;</span><br><span class="line">                    x += xStep;</span><br><span class="line">                    y += yStep;</span><br><span class="line">                    eventTime = SystemClock.uptimeMillis();</span><br><span class="line">                    e = <span class="keyword">new</span> MonkeyTouchEvent(MotionEvent.ACTION_MOVE).setDownTime(downTime)</span><br><span class="line">                        .setEventTime(eventTime).addPointer(<span class="number">0</span>, x, y, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">                    mQ.addLast(e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                eventTime = SystemClock.uptimeMillis();</span><br><span class="line">                e = <span class="keyword">new</span> MonkeyTouchEvent(MotionEvent.ACTION_UP).setDownTime(downTime)</span><br><span class="line">                    .setEventTime(eventTime).addPointer(<span class="number">0</span>, x, y, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">                mQ.addLast(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle pinch or zoom action</span></span><br><span class="line">        <span class="keyword">if</span> ((s.indexOf(EVENT_KEYWORD_PINCH_ZOOM) &gt;= <span class="number">0</span>) &amp;&amp; args.length == <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="comment">//Parse the parameters</span></span><br><span class="line">            <span class="keyword">float</span> pt1xStart = Float.parseFloat(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">float</span> pt1yStart = Float.parseFloat(args[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">float</span> pt1xEnd = Float.parseFloat(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">float</span> pt1yEnd = Float.parseFloat(args[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> pt2xStart = Float.parseFloat(args[<span class="number">4</span>]);</span><br><span class="line">            <span class="keyword">float</span> pt2yStart = Float.parseFloat(args[<span class="number">5</span>]);</span><br><span class="line">            <span class="keyword">float</span> pt2xEnd = Float.parseFloat(args[<span class="number">6</span>]);</span><br><span class="line">            <span class="keyword">float</span> pt2yEnd = Float.parseFloat(args[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> stepCount = Integer.parseInt(args[<span class="number">8</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> x1 = pt1xStart;</span><br><span class="line">            <span class="keyword">float</span> y1 = pt1yStart;</span><br><span class="line">            <span class="keyword">float</span> x2 = pt2xStart;</span><br><span class="line">            <span class="keyword">float</span> y2 = pt2yStart;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> downTime = SystemClock.uptimeMillis();</span><br><span class="line">            <span class="keyword">long</span> eventTime = SystemClock.uptimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (stepCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">float</span> pt1xStep = (pt1xEnd - pt1xStart) / stepCount;</span><br><span class="line">                <span class="keyword">float</span> pt1yStep = (pt1yEnd - pt1yStart) / stepCount;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">float</span> pt2xStep = (pt2xEnd - pt2xStart) / stepCount;</span><br><span class="line">                <span class="keyword">float</span> pt2yStep = (pt2yEnd - pt2yStart) / stepCount;</span><br><span class="line"></span><br><span class="line">                mQ.addLast(<span class="keyword">new</span> MonkeyTouchEvent(MotionEvent.ACTION_DOWN).setDownTime(downTime)</span><br><span class="line">                        .setEventTime(eventTime).addPointer(<span class="number">0</span>, x1, y1, <span class="number">1</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">                mQ.addLast(<span class="keyword">new</span> MonkeyTouchEvent(MotionEvent.ACTION_POINTER_DOWN</span><br><span class="line">                        | (<span class="number">1</span> &lt;&lt; MotionEvent.ACTION_POINTER_INDEX_SHIFT)).setDownTime(downTime)</span><br><span class="line">                        .addPointer(<span class="number">0</span>, x1, y1).addPointer(<span class="number">1</span>, x2, y2).setIntermediateNote(<span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stepCount; ++i) &#123;</span><br><span class="line">                    x1 += pt1xStep;</span><br><span class="line">                    y1 += pt1yStep;</span><br><span class="line">                    x2 += pt2xStep;</span><br><span class="line">                    y2 += pt2yStep;</span><br><span class="line"></span><br><span class="line">                    eventTime = SystemClock.uptimeMillis();</span><br><span class="line">                    mQ.addLast(<span class="keyword">new</span> MonkeyTouchEvent(MotionEvent.ACTION_MOVE).setDownTime(downTime)</span><br><span class="line">                            .setEventTime(eventTime).addPointer(<span class="number">0</span>, x1, y1, <span class="number">1</span>, <span class="number">5</span>).addPointer(<span class="number">1</span>, x2,</span><br><span class="line">                                    y2, <span class="number">1</span>, <span class="number">5</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                eventTime = SystemClock.uptimeMillis();</span><br><span class="line">                mQ.addLast(<span class="keyword">new</span> MonkeyTouchEvent(MotionEvent.ACTION_POINTER_UP)</span><br><span class="line">                        .setDownTime(downTime).setEventTime(eventTime).addPointer(<span class="number">0</span>, x1, y1)</span><br><span class="line">                        .addPointer(<span class="number">1</span>, x2, y2));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle flip events</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_FLIP) &gt;= <span class="number">0</span> &amp;&amp; args.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> keyboardOpen = Boolean.parseBoolean(args[<span class="number">0</span>]);</span><br><span class="line">            MonkeyFlipEvent e = <span class="keyword">new</span> MonkeyFlipEvent(keyboardOpen);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle launch events</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_ACTIVITY) &gt;= <span class="number">0</span> &amp;&amp; args.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            String pkg_name = args[<span class="number">0</span>];</span><br><span class="line">            String cl_name = args[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">long</span> alarmTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            ComponentName mApp = <span class="keyword">new</span> ComponentName(pkg_name, cl_name);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (args.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    alarmTime = Long.parseLong(args[<span class="number">2</span>]);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                    System.err.println(<span class="string">&quot;// &quot;</span> + e.toString());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (args.length == <span class="number">2</span>) &#123;</span><br><span class="line">                MonkeyActivityEvent e = <span class="keyword">new</span> MonkeyActivityEvent(mApp);</span><br><span class="line">                mQ.addLast(e);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                MonkeyActivityEvent e = <span class="keyword">new</span> MonkeyActivityEvent(mApp, alarmTime);</span><br><span class="line">                mQ.addLast(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Handle the device wake up event</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_DEVICE_WAKEUP) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            String pkg_name = <span class="string">&quot;com.google.android.powerutil&quot;</span>;</span><br><span class="line">            String cl_name = <span class="string">&quot;com.google.android.powerutil.WakeUpScreen&quot;</span>;</span><br><span class="line">            <span class="keyword">long</span> deviceSleepTime = mDeviceSleepTime;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Start the wakeUpScreen test activity to turn off the screen.</span></span><br><span class="line">            ComponentName mApp = <span class="keyword">new</span> ComponentName(pkg_name, cl_name);</span><br><span class="line">            mQ.addLast(<span class="keyword">new</span> MonkeyActivityEvent(mApp, deviceSleepTime));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//inject the special key for the wakeUpScreen test activity.</span></span><br><span class="line">            mQ.addLast(<span class="keyword">new</span> MonkeyKeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_0));</span><br><span class="line">            mQ.addLast(<span class="keyword">new</span> MonkeyKeyEvent(KeyEvent.ACTION_UP, KeyEvent.KEYCODE_0));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Add the wait event after the device sleep event so that the monkey</span></span><br><span class="line">            <span class="comment">//can continue after the device wake up.</span></span><br><span class="line">            mQ.addLast(<span class="keyword">new</span> MonkeyWaitEvent(deviceSleepTime + <span class="number">3000</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Insert the menu key to unlock the screen</span></span><br><span class="line">            mQ.addLast(<span class="keyword">new</span> MonkeyKeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_MENU));</span><br><span class="line">            mQ.addLast(<span class="keyword">new</span> MonkeyKeyEvent(KeyEvent.ACTION_UP, KeyEvent.KEYCODE_MENU));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Insert the back key to dismiss the test activity</span></span><br><span class="line">            mQ.addLast(<span class="keyword">new</span> MonkeyKeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_BACK));</span><br><span class="line">            mQ.addLast(<span class="keyword">new</span> MonkeyKeyEvent(KeyEvent.ACTION_UP, KeyEvent.KEYCODE_BACK));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle launch instrumentation events</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_INSTRUMENTATION) &gt;= <span class="number">0</span> &amp;&amp; args.length == <span class="number">2</span>) &#123;</span><br><span class="line">            String test_name = args[<span class="number">0</span>];</span><br><span class="line">            String runner_name = args[<span class="number">1</span>];</span><br><span class="line">            MonkeyInstrumentationEvent e = <span class="keyword">new</span> MonkeyInstrumentationEvent(test_name, runner_name);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle wait events</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_WAIT) &gt;= <span class="number">0</span> &amp;&amp; args.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> sleeptime = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">                MonkeyWaitEvent e = <span class="keyword">new</span> MonkeyWaitEvent(sleeptime);</span><br><span class="line">                mQ.addLast(e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle the profile wait time</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_PROFILE_WAIT) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            MonkeyWaitEvent e = <span class="keyword">new</span> MonkeyWaitEvent(mProfileWaitTime);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle keypress events</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_KEYPRESS) &gt;= <span class="number">0</span> &amp;&amp; args.length == <span class="number">1</span>) &#123;</span><br><span class="line">            String key_name = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> keyCode = MonkeySourceRandom.getKeyCode(key_name);</span><br><span class="line">            <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_UNKNOWN) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            MonkeyKeyEvent e = <span class="keyword">new</span> MonkeyKeyEvent(KeyEvent.ACTION_DOWN, keyCode);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">            e = <span class="keyword">new</span> MonkeyKeyEvent(KeyEvent.ACTION_UP, keyCode);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle longpress events</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_LONGPRESS) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            MonkeyKeyEvent e;</span><br><span class="line">            e = <span class="keyword">new</span> MonkeyKeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DPAD_CENTER);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">            MonkeyWaitEvent we = <span class="keyword">new</span> MonkeyWaitEvent(LONGPRESS_WAIT_TIME);</span><br><span class="line">            mQ.addLast(we);</span><br><span class="line">            e = <span class="keyword">new</span> MonkeyKeyEvent(KeyEvent.ACTION_UP, KeyEvent.KEYCODE_DPAD_CENTER);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//The power log event is mainly for the automated power framework</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_POWERLOG) &gt;= <span class="number">0</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String power_log_type = args[<span class="number">0</span>];</span><br><span class="line">            String test_case_status;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (args.length == <span class="number">1</span>)&#123;</span><br><span class="line">                MonkeyPowerEvent e = <span class="keyword">new</span> MonkeyPowerEvent(power_log_type);</span><br><span class="line">                mQ.addLast(e);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.length == <span class="number">2</span>)&#123;</span><br><span class="line">                test_case_status = args[<span class="number">1</span>];</span><br><span class="line">                MonkeyPowerEvent e = <span class="keyword">new</span> MonkeyPowerEvent(power_log_type, test_case_status);</span><br><span class="line">                mQ.addLast(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Write power log to sdcard</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_WRITEPOWERLOG) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            MonkeyPowerEvent e = <span class="keyword">new</span> MonkeyPowerEvent();</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Run the shell command</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_RUNCMD) &gt;= <span class="number">0</span> &amp;&amp; args.length == <span class="number">1</span>) &#123;</span><br><span class="line">            String cmd = args[<span class="number">0</span>];</span><br><span class="line">            MonkeyCommandEvent e = <span class="keyword">new</span> MonkeyCommandEvent(cmd);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Input the string through the shell command</span></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_INPUT_STRING) &gt;= <span class="number">0</span> &amp;&amp; args.length == <span class="number">1</span>) &#123;</span><br><span class="line">            String input = args[<span class="number">0</span>];</span><br><span class="line">            String cmd = <span class="string">&quot;input text &quot;</span> + input;</span><br><span class="line">            MonkeyCommandEvent e = <span class="keyword">new</span> MonkeyCommandEvent(cmd);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_START_FRAMERATE_CAPTURE) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            MonkeyGetFrameRateEvent e = <span class="keyword">new</span> MonkeyGetFrameRateEvent(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_END_FRAMERATE_CAPTURE) &gt;= <span class="number">0</span> &amp;&amp; args.length == <span class="number">1</span>) &#123;</span><br><span class="line">            String input = args[<span class="number">0</span>];</span><br><span class="line">            MonkeyGetFrameRateEvent e = <span class="keyword">new</span> MonkeyGetFrameRateEvent(<span class="string">&quot;end&quot;</span>, input);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_START_APP_FRAMERATE_CAPTURE) &gt;= <span class="number">0</span> &amp;&amp; args.length == <span class="number">1</span>) &#123;</span><br><span class="line">            String app = args[<span class="number">0</span>];</span><br><span class="line">            MonkeyGetAppFrameRateEvent e = <span class="keyword">new</span> MonkeyGetAppFrameRateEvent(<span class="string">&quot;start&quot;</span>, app);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s.indexOf(EVENT_KEYWORD_END_APP_FRAMERATE_CAPTURE) &gt;= <span class="number">0</span> &amp;&amp; args.length == <span class="number">2</span>) &#123;</span><br><span class="line">            String app = args[<span class="number">0</span>];</span><br><span class="line">            String label = args[<span class="number">1</span>];</span><br><span class="line">            MonkeyGetAppFrameRateEvent e = <span class="keyword">new</span> MonkeyGetAppFrameRateEvent(<span class="string">&quot;end&quot;</span>, app, label);</span><br><span class="line">            mQ.addLast(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Extracts an event and a list of arguments from a line. If the line does</span></span><br><span class="line"><span class="comment">     * not match the format required, it is ignored.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> line A string in the form &#123;<span class="doctag">@code</span> cmd(arg1,arg2,arg3)&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processLine</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index1 = line.indexOf(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        <span class="keyword">int</span> index2 = line.indexOf(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index1 &lt; <span class="number">0</span> || index2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] args = line.substring(index1 + <span class="number">1</span>, index2).split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            args[i] = args[i].trim();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        handleEvent(line, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Closes the script file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException If there was an error closing the file.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        mFileOpened = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFStream.close();</span><br><span class="line">            mInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="comment">// File was never opened so it can&#x27;t be closed.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read next batch of events from the script file into the event queue.</span></span><br><span class="line"><span class="comment">     * Checks if the script is open and then reads the next MAX_ONE_TIME_READS</span></span><br><span class="line"><span class="comment">     * events or reads until the end of the file. If no events are read, then</span></span><br><span class="line"><span class="comment">     * the script is closed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException If there was an error reading the file.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readNextBatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> linesRead = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (THIS_DEBUG) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;readNextBatch(): reading next batch of events&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mFileOpened) &#123;</span><br><span class="line">            resetValue();</span><br><span class="line">            readHeader();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mReadScriptLineByLine) &#123;</span><br><span class="line">            linesRead = readOneLine();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            linesRead = readLines();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (linesRead == <span class="number">0</span>) &#123;</span><br><span class="line">            closeFile();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sleep for a period of given time. Used to introduce latency between</span></span><br><span class="line"><span class="comment">     * events.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time The amount of time to sleep in ms</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">needSleep</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (time &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Checks if the file can be opened and if the header is valid.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if the file exists and the header is valid, false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> validHeader;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            validHeader = readHeader();</span><br><span class="line">            closeFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mVerbose &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Replaying &quot;</span> + mEventCountInScript + <span class="string">&quot; events with speed &quot;</span> + mSpeed);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> validHeader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVerbose</span><span class="params">(<span class="keyword">int</span> verbose)</span> </span>&#123;</span><br><span class="line">        mVerbose = verbose;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adjust key downtime and eventtime according to both recorded values and</span></span><br><span class="line"><span class="comment">     * current system time.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e A KeyEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">adjustKeyEventTime</span><span class="params">(MonkeyKeyEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getEventTime() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> thisDownTime = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> thisEventTime = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> expectedDelay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mLastRecordedEventTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// first time event</span></span><br><span class="line">            thisDownTime = SystemClock.uptimeMillis();</span><br><span class="line">            thisEventTime = thisDownTime;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.getDownTime() != mLastRecordedDownTimeKey) &#123;</span><br><span class="line">                thisDownTime = e.getDownTime();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                thisDownTime = mLastExportDownTimeKey;</span><br><span class="line">            &#125;</span><br><span class="line">            expectedDelay = (<span class="keyword">long</span>) ((e.getEventTime() - mLastRecordedEventTime) * mSpeed);</span><br><span class="line">            thisEventTime = mLastExportEventTime + expectedDelay;</span><br><span class="line">            <span class="comment">// add sleep to simulate everything in recording</span></span><br><span class="line">            needSleep(expectedDelay - SLEEP_COMPENSATE_DIFF);</span><br><span class="line">        &#125;</span><br><span class="line">        mLastRecordedDownTimeKey = e.getDownTime();</span><br><span class="line">        mLastRecordedEventTime = e.getEventTime();</span><br><span class="line">        e.setDownTime(thisDownTime);</span><br><span class="line">        e.setEventTime(thisEventTime);</span><br><span class="line">        mLastExportDownTimeKey = thisDownTime;</span><br><span class="line">        mLastExportEventTime = thisEventTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adjust motion downtime and eventtime according to current system time.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e A MotionEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">adjustMotionEventTime</span><span class="params">(MonkeyMotionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> thisEventTime = SystemClock.uptimeMillis();</span><br><span class="line">        <span class="keyword">long</span> thisDownTime = e.getDownTime();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (thisDownTime == mLastRecordedDownTimeMotion) &#123;</span><br><span class="line">            <span class="comment">// this event is the same batch as previous one</span></span><br><span class="line">            e.setDownTime(mLastExportDownTimeMotion);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// this event is the start of a new batch</span></span><br><span class="line">            mLastRecordedDownTimeMotion = thisDownTime;</span><br><span class="line">            <span class="comment">// update down time to match current time</span></span><br><span class="line">            e.setDownTime(thisEventTime);</span><br><span class="line">            mLastExportDownTimeMotion = thisEventTime;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// always refresh event time</span></span><br><span class="line">        e.setEventTime(thisEventTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the next event to be injected from the script. If the event queue is</span></span><br><span class="line"><span class="comment">     * empty, reads the next n events from the script into the queue, where n is</span></span><br><span class="line"><span class="comment">     * the lesser of the number of remaining events and the value specified by</span></span><br><span class="line"><span class="comment">     * MAX_ONE_TIME_READS. If the end of the file is reached, no events are</span></span><br><span class="line"><span class="comment">     * added to the queue and null is returned.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The first event in the event queue or null if the end of the file</span></span><br><span class="line"><span class="comment">     *         is reached or if an error is encountered reading the file.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MonkeyEvent <span class="title">getNextEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> recordedEventTime = -<span class="number">1</span>;</span><br><span class="line">        MonkeyEvent ev;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mQ.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                readNextBatch();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ev = mQ.getFirst();</span><br><span class="line">            mQ.removeFirst();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ev.getEventType() == MonkeyEvent.EVENT_TYPE_KEY) &#123;</span><br><span class="line">            adjustKeyEventTime((MonkeyKeyEvent) ev);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ev.getEventType() == MonkeyEvent.EVENT_TYPE_TOUCH</span><br><span class="line">                || ev.getEventType() == MonkeyEvent.EVENT_TYPE_TRACKBALL) &#123;</span><br><span class="line">            adjustMotionEventTime((MonkeyMotionEvent) ev);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;MonkeyScript是什么&quot;&gt;&lt;a href=&quot;#MonkeyScript是什么&quot; class=&quot;headerlink&quot; title=&quot;MonkeyScript是什么&quot;&gt;&lt;/a&gt;MonkeyScript是什么&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;MonkeyScript&lt;/strong&gt;是monkey的脚本语言，是一组可以被Monkey识别的命令集合，可以帮助我们完成一系列被固定的重复性操作。&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用MonkeyScript&quot;&gt;&lt;a href=&quot;#为什么要使用MonkeyScript&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用MonkeyScript&quot;&gt;&lt;/a&gt;为什么要使用MonkeyScript&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Monkey&lt;/strong&gt;测试太&lt;strong&gt;过于随机&lt;/strong&gt;、对主要测试模块&lt;strong&gt;没有针对性&lt;/strong&gt;、执行过多&lt;strong&gt;无意义操作&lt;/strong&gt;等，虽然Monkey可以忽略各种异常，但Money进程容易挂掉，对测试结果有较大的影响。针对以上问题，&lt;strong&gt;MonkeyScript&lt;/strong&gt;可以让用户&lt;strong&gt;制定专属的脚本&lt;/strong&gt;，更加有针对性测试对应模块。</summary>
    
    
    
    <category term="Monkey" scheme="https://dyasher.github.io/categories/Monkey/"/>
    
    <category term="自动化测试" scheme="https://dyasher.github.io/categories/Monkey/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="测试" scheme="https://dyasher.github.io/categories/Monkey/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="自动化测试" scheme="https://dyasher.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="压力测试" scheme="https://dyasher.github.io/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
    <category term="MonkeyScript" scheme="https://dyasher.github.io/tags/MonkeyScript/"/>
    
    <category term="脚本" scheme="https://dyasher.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Monkey——自动化测试</title>
    <link href="https://dyasher.github.io/2022/10/18/Monkey%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>https://dyasher.github.io/2022/10/18/Monkey%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</id>
    <published>2022-10-18T14:01:08.000Z</published>
    <updated>2022-10-18T14:23:36.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识Monkey"><a href="#认识Monkey" class="headerlink" title="认识Monkey"></a>认识Monkey</h2><h3 id="什么是Monkey"><a href="#什么是Monkey" class="headerlink" title="什么是Monkey"></a>什么是Monkey</h3><ul><li>又指“猴子测试”，是指没有测试经验对计算机根本不了解的人，不知道任何程序的交互知识，给他一个程序，就会针对他看到的页面进行操作。这种测试方式在产品早期会找到很多bug，为<strong>用户节省</strong>不少的<strong>时间</strong>。</li><li>Android的SDK 里面，Monkey的tools是一个命令行工具，当连接Android设备时，只要在命令行里输入相应命令就能运行tools。</li><li>Monkey是Androld中的一个命令行工具，可以运行在模拟器里或实际设备中。它向系统发送伪<strong>随机的用户事件流</strong>（如按键输入、触摸屏输入、手势输入等），实现对正在开发的应用程序进行测试。<strong>Monkey测试是一种为了测试软件的稳定性、健壮性的快速有效的方法</strong>。<a id="more"></a></li></ul><h3 id="Monkey在哪里"><a href="#Monkey在哪里" class="headerlink" title="Monkey在哪里"></a>Monkey在哪里</h3><p>每台android手机里都有Monkey工具，但是我们是看不到的，因为在普通用户的手机上Monkey不是一个可视化的工具，例如手机里的微信，这是一个可视化的，能打开，有图形化界面，但是Monkey没有，除非我们手机能进入工程模式，因为在各个厂家中有不同的内部monkey可视化工具。</p><h3 id="Money优缺点"><a href="#Money优缺点" class="headerlink" title="Money优缺点"></a>Money优缺点</h3><p><strong>优点：</strong></p><ul><li>简单易用；</li><li>方便快捷；</li><li>理论上只要运行事件次数足够多可以测试到所有bug。</li></ul><p><strong>缺点：</strong></p><ul><li><p>遍历界面有限， 在monkey测试中，由于事件的随机性，使得monkey容易卡在某些简单页面，比如登陆页面这种可操作内容很少的页面。导致测试效果不佳。测试<strong>有效性大打折扣</strong>；</p></li><li><p>无法得知Bug的复现步骤。由于Monkey的随机性，如果Bug是由于事件发生的特定序列产生的，往往很<strong>难复现Bug</strong>；</p></li><li><p><strong>路径回环</strong>，由于monkey<strong>太过随机</strong>，最后根本无法控制，很容易陷于一个页面无法出来，或者陷入某个无关紧要的地方无法出来，导致测试结果并不具有很好的意义。这也是导致遍历界面有限的原因。</p></li></ul><h3 id="什么是Monkey-Test"><a href="#什么是Monkey-Test" class="headerlink" title="什么是Monkey Test"></a>什么是Monkey Test</h3><ul><li>Monkey test是一项<strong>压力测试</strong>，可以在规定的次数范围内做任何随机的操作，随机操作包括点击、滑动、应用切换、横竖屏、应用关闭等等，用户能做的操作统统可以模拟。</li><li>Monkey test跑出来<strong>crash</strong>的<strong>bug等级</strong>永远为<strong>1</strong>，版本release前，Monkey跑出的结果中<strong>crash</strong>要为<strong>0</strong>。业内标准：<strong>final release</strong>前，Monkey跑完的总次数应为<strong>25W</strong>次，其结果里<strong>不允许有nullPointException出现</strong>。</li><li>用于进行<strong>压力测试</strong>， 开发人员结合monkey 打印的日志 和系统打印的日志，得到测试中出现的问题。</li></ul><h3 id="Monkey-测试策略"><a href="#Monkey-测试策略" class="headerlink" title="Monkey 测试策略"></a>Monkey 测试策略</h3><ol><li><p>单个apk的验收测试时，使用单一apk且不忽略异常的命令执行</p></li><li><p>单个apk的解决问题的测试时，使用单一apk且忽略异常的命令执行。这样可以在一次执行的过程中发现应用程序中的多个问题。</p></li><li><p>单个apk的应用程序的压力/健壮性测试时，主要缩短monkey测试中事件与事件之间的延迟时间，验证在快速的事件响应的过程中，程序是否能正常运行。将–throttle的值设定为500或者更小，一般都使用500毫秒的延迟事件。</p></li><li><p>在进行apk的集合测试（测试对象为多个APP）时，对于高频率使用的apk、长时间使用的apk都要包含在执行的应用程序中</p><p><strong>APK分类具体：</strong></p><p>高频率使用的apk如：Phone、Contacts、Message、Settings、File Manager、Gallery、Input Method</p><p>长时间使用的apk如：Phone、Browser、Music player、Camera、Video player、Email、Chat</p><p>其他的apk如：Calendar、Notepad、Calculator、FM Radio、Google Search</p></li></ol><h3 id="Monkey与电脑、手机的关系"><a href="#Monkey与电脑、手机的关系" class="headerlink" title="Monkey与电脑、手机的关系"></a>Monkey与电脑、手机的关系</h3><p>借助<code>ADB</code>才能与Monkey进行通讯。</p><p><img src="https://images.mmzi.online//blog/20220831/202210172118651.png" alt="image-20221017211845466"></p><h2 id="所需环境搭建"><a href="#所需环境搭建" class="headerlink" title="所需环境搭建"></a>所需环境搭建</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><ul><li><p>SDK下载</p><p>1、下载jdk：<a href="https://blog.csdn.net/weixin_43731532/article/details/125204502?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_43731532/article/details/125204502?spm=1001.2014.3001.5501</a><br>2、下载sdk：<a href="https://blog.csdn.net/weixin_45638642/article/details/122139997">https://blog.csdn.net/weixin_45638642/article/details/122139997</a></p></li><li><p>手机环境</p><p>1、打开手机的开发者调试工具，用usb数据线连接你的手机</p><p><img src="https://images.mmzi.online//blog/20220831/202210172125837.png" alt="204eb21d388145d1a419f0b92cb0d3dc"></p><p><img src="https://images.mmzi.online//blog/20220831/202210172125228.png" alt="91042983c966481b88292b32b91ff268"></p><p><img src="https://images.mmzi.online//blog/20220831/202210172125621.png" alt="b9e3690b2d034d4d80e5db22fd76855b"></p><p>2、通过adb命令连接手机</p><p>在CMD下输入：<code>adb connect 127.0.0.1：21503</code>（具体端口看模拟器上的端口，真机连接可以百度查找方法）；</p><p>检查是否连接成功：<code>adb devices</code>；</p><p><img src="https://images.mmzi.online//blog/20220831/202210172129577.png" alt="image-20221017212900449"></p></li></ul><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>1、执行Monkey测试前，一定要确保屏幕处于解锁状态。</p><p>2、设置屏幕超时时间为最大时间（设置-&gt;显示-&gt;休眠-&gt;30分钟或者从不）。以防测试过程中手机锁屏，影响Monkey测试。</p><p>3、抓取adb log，（如果出现anr，需要将/data/anr下的anr log拿出来，需要手机有root权限）。</p><p>4、在连接模拟器/真机后，查看手机所有安装包和安装的所有第三方安装包。</p><ul><li><p>查看所有安装包：adb shell pm list packages</p><p><img src="https://images.mmzi.online//blog/20220831/202210172133978.png" alt="image-20221017213333856"></p></li><li><p>查看所有的第三方安装包：adb shell pm list packages -3</p><p><img src="https://images.mmzi.online//blog/20220831/202210172134294.png" alt="image-20221017213406219"></p></li></ul><h2 id="Monkey测试命令"><a href="#Monkey测试命令" class="headerlink" title="Monkey测试命令"></a>Monkey测试命令</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -s 1080 -p 包名 –hprof --ignore-timeouts --ignore-crashes --ignore-security-ecxeptions -v -v --throttle 200 1000000</span><br></pre></td></tr></table></figure><p><strong>拆分讲解：</strong></p><p><strong>1）-p</strong><br>用于约束限制，用此参数指定一个或多个包（Package）。指定包之后，Monkey将只允许系统启动指定的APP。如果不指定包，Monkey将允许系统启动设备中的所有APP。</p><p><strong>2）–ignore-crashes</strong><br>用于指定当应用程序崩溃时（Force &amp; Close 错误），Monkey是否停止运行。如果使用此参数，即使应用程序崩溃，Monkey依然会发送事件，知道事件计数完成。</p><p><strong>3）–ignore-timeouts</strong><br>用于指定当应用程序发生ANR（APPlication No Responding）错误时Monkey是否停止运行。如果使用此参数，即使应用程序发生ANR错误，Monkey依然会发送事件，直到事件计数完成。</p><p><strong>4）–ignore-security-ecxeptions</strong><br>用于指定当应用程序发生许可错误时（如证书许可，网络许可等），Monkey是否停止运行。如果使用此参数，即使应用程序发生许可错误，Monkey依然会发送事件，直到事件计数完成。</p><p><strong>5）-v</strong><br>用于指定反馈信息级别（信息级别就是日志的详细程度），总共分3个级别，分别对应的参数如下所示：<br>①日志级别：<strong>Level0</strong><br>示例：adb shell monkey -p com.android.contacts <strong>-v</strong> –throttle 200 1000000<br>缺省值，仅提供启动提示、测试完成和最终结果等少量信息。<br>②日志级别：<strong>Level1</strong><br>示例：adb shell monkey -p com.android.contacts <strong>-v -v</strong> –throttle 200 1000000<br>提供较为详细的日志，包括每个发送到Activity的事件信息。<br>③日志级别：<strong>Level2</strong><br>示例：adb shell monkey -p com.android.contacts <strong>-v -v -v</strong> –throttle 200 1000000<br>提供最详细的日志，包括了测试中选中/未选中的Activity信息。</p><p><strong>6）–throttle</strong><br>在每次操作（即事件）间的延时，单位是毫秒，一般我们设置延时时间为500ms。比较接近人的手动操作，如果在测试中发生了anr，可以将间隔设置为500ms，进行测试验证。</p><p><strong>7）-s</strong><br>s其实就是seed，它是随机数的事件序列定一个值，若出现问题下次可以重复同样的序列进行排错。例如上面其实就是指定了一个seed为1080的随机事件序列</p><p><strong>8）–hprof</strong></p><p>指定了该参数，Monkey会在发送事件序列的前、后，生成性能分析报告。通常会在data/misc目录下生成一个5MB左右大小的文件</p><blockquote><ul><li>APP在操作过程中会存在崩溃、超时、异常等情况，导致monkey直接停止测试。忽略这些异常崩溃可继续执行，直到执行随机时间次数达到设定值。</li><li>我们在测试过程中，建议不要忽略这些异常，尽可能的暴露出app中存在的问题，如果选择忽略出现crach，anr等现象，手机中就不会有提示，不便于判断测试是否正常。忽略异常是想要对此模块执行完成，尽可能多的发现更多问题，但是这个问题的判断只能通过log去分析，不便于测试的判断。所以我们测试建议使用下边的命令：<br>adb shell monkey -p 包名 -v -v -v –throttle 500 360000 &gt;D：monkeylog.txt</li></ul></blockquote><h3 id="事件参数解释"><a href="#事件参数解释" class="headerlink" title="事件参数解释"></a>事件参数解释</h3><p><strong>Event percentages：</strong><br><strong>0：–pct-touch</strong><br>events percentage触摸事件百分比（触摸事件是一个在屏幕单一位置的按下-抬起事件）</p><p><strong>1：–pct-motion</strong><br>events percentage手势事件百分比（手势事件是由一个在屏幕某处的按下事件、一系列的伪随机移动、一个抬起事件组成）即一个滑动操作，但是是直线的，不能拐弯</p><p><strong>2：–pct-pinchzoom</strong><br>zoom events percentage二指缩放百分比，即智能机上的放大缩小手势操作</p><p><strong>3：–pct-trackball  即单纯的Move（ACTION_MOVE）</strong><br>events percentage轨迹球事件百分比（轨迹球事件包括一个或多个随机移动，有时还伴有点击。轨迹球现在智能手机上已经没有了，就是类似手柄的方向键一样）</p><p><strong>4：–pct-rotation</strong><br>rotation events percentage屏幕旋转百分比，横屏竖屏</p><p><strong>5：–pct-nav 基本导航事件。即来自于方向输入设备的上下左右操作。</strong><br>events percentage”基本”导航事件百分比（导航事件包括上下左右，如方向输入设备的输入）老手机的上下左右键，智能机上没有</p><p><strong>6：–pct-majornav 即Navigation Bar的确认，菜单，返回键等</strong><br>nav events percentage”主要”导航事件百分比（这些导航事件通常会引发UI的事件，例如5-way pad的中间键、回退键、菜单键）</p><p><strong>7：–pct-syskeys(key)</strong><br>operations percentage”系统”按钮事件百分比（这些按钮一般专供系统使用，如Home, Back, Start Call, End Call,音量控制）</p><p><strong>8：–pct-appswitch</strong><br>switch events percentage 启动activity事件百分比。在随机的间隔里，Monkey会执行一个startActivity()调用，作为最大程度覆盖包中全部Activity的一种方法</p><p><strong>9：–pct-flip</strong><br>flip percentage键盘轻弹百分比，如点击输入框，键盘弹起，点击输入框以外区域，键盘收回</p><p><strong>10：–pct-anyevent 该事件可能包含其他上述事件。</strong><br>percentage其他类型事件百分比。包括了其他所有的类型事件，如按键、其他不常用的设备上的按钮等等</p><blockquote><p>当不作任何配置的时候，默认为–pct-anyevent <percent>，此时所有事件的触发均为随机的。当所有事件的百分比加起重来小于100%的时候，多余的随机事件也将被转化为–pct-anyevent <percent>事件。<strong>超过时，系统会重新运算相应的比例</strong></p></blockquote><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><p><strong>1 -c：</strong> activity必须至少包含一个指定的category，才能被启动，否则启动不了；</p><p><strong>2 –dbg-no-events：</strong>初始化启动的activity，但是不产生任何事件。为了得到最佳结果，把它与-v、一个或几个包约 束、以及一个保持Monkey运行30秒或更长时间的非零值联合起来，从而提供一个环境，可以监视应用程序所调用的包之间的转换</p><p><strong>3 –kill-process-after-error：</strong>发生错误后直接杀掉进程</p><p><strong>4 –monitor-native-crashes：</strong>跟踪本地方法的崩溃问题</p><p><strong>5 –wait-dbg：</strong>直到连接了调试器才执行monkey测试。</p><p><strong>6 –help：</strong>打印帮助信息</p><h3 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p oct.mama -s 100 --throttle 10 --ignore-crashes --ignore-timeouts --monitor-native-crashes --pct-appswitch 30 --pct-majornav 20 --pct-nav 20 --pct-touch 20 --pct-motion 10 -v -v -v 10000 &gt; D:\monkey_log.txt</span><br></pre></td></tr></table></figure><h2 id="手动结束测试"><a href="#手动结束测试" class="headerlink" title="手动结束测试"></a>手动结束测试</h2><p><strong>目标：</strong>当压力测试运行时间较长时，我们可能希望手动停止压力测试。</p><p><strong>背景：</strong>假设我们设置了运行50万个随机事件，然后断开电脑和手机的连接，发现monkey还在跑。</p><p><strong>原因：</strong>PC端只用于输入配置参数和启动命令，手机作为运行命令，即使断开连接也不影响手机端运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p com.example.hello 500000</span><br></pre></td></tr></table></figure><p><strong>步骤：</strong></p><ul><li><p>用数据线把手机和电脑连接</p></li><li><p>进入adb shell</p></li><li><p>查看monkey进程id</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps|grep monkey</span><br></pre></td></tr></table></figure></li><li><p>杀掉monkey进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill 28734(id)</span><br></pre></td></tr></table></figure></li><li><p>确认monkey进程是否还在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps|grep monkey</span><br></pre></td></tr></table></figure><p><img src="https://images.mmzi.online//blog/20220831/202210172255669.png" alt="20190313210144565"></p></li></ul><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><h3 id="一般的错误分析步骤："><a href="#一般的错误分析步骤：" class="headerlink" title="一般的错误分析步骤："></a>一般的错误分析步骤：</h3><ol><li>找到是monkey里面的哪个地方出错</li><li>查看Monkey里面出错前的一些事件动作，并手动执行该动作</li><li>若以上步骤还不能找出，可以使用之前执行的monkey命令再执行一遍，注意seed值要一样–复现</li></ol><h3 id="一般的测试结果分析："><a href="#一般的测试结果分析：" class="headerlink" title="一般的测试结果分析："></a>一般的测试结果分析：</h3><ol><li><p>ANR问题：在日志中搜索“ANR”</p></li><li><p>崩溃问题：在日志中搜索“Exception” </p></li><li><p>基本内容解析：Monkey运行时输出的日志一般包含四类信息，分别是测试命令信息、伪随机事件流信息、异常信息、Monkey执行结果信息。</p><p><strong>测试命令信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-----随机种子，执行事件的数目-----</span><br><span class="line">:Monkey: seed=1639214805777 count=100</span><br><span class="line"></span><br><span class="line">-----可运行的应用列表-----</span><br><span class="line">:AllowPackage: com.ss.android.article.news</span><br><span class="line"></span><br><span class="line">-----表示启动的活动-----</span><br><span class="line">:IncludeCategory: android.intent.category.LAUNCHER</span><br><span class="line">:IncludeCategory: android.intent.category.MONKEY</span><br><span class="line"></span><br><span class="line">-----表示打开的活动-----</span><br><span class="line">// Selecting main activities from category android.intent.category.LAUNCHER</span><br><span class="line">// Seeded: 1639214805777</span><br><span class="line"></span><br><span class="line">-----各事件的百分比-----</span><br><span class="line">// Event percentages:</span><br><span class="line">//   0: 15.0%</span><br><span class="line">//   1: 10.0%</span><br><span class="line">//   2: 2.0%</span><br><span class="line">//   3: 15.0%</span><br><span class="line">//   4: -0.0%</span><br><span class="line">//   5: -0.0%</span><br><span class="line">//   6: 25.0%</span><br><span class="line">//   7: 15.0%</span><br><span class="line">//   8: 2.0%</span><br><span class="line">//   9: 2.0%</span><br><span class="line">//   10: 1.0%</span><br><span class="line">//   11: 13.0%</span><br></pre></td></tr></table></figure><p>日志中会显示进行各种操作的百分比：其含义会随着Android版本的不同而不同，为了了解其含义，首先使用如下命令查看Android版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure><p>查询结果</p><p><img src="https://images.mmzi.online//blog/20220831/202210180000624.png" alt="4f73bba3a7034e3c8459d0e1762d3459"></p><p>通过阅读对应版本的money源码中的MonkeySourceRandom.java文件，可以看到其Event序列是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FACTOR_TOUCH        = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FACTOR_MOTION       = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FACTOR_PINCHZOOM    = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FACTOR_TRACKBALL    = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FACTOR_ROTATION     = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FACTOR_NAV          = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FACTOR_MAJORNAV     = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FACTOR_SYSOPS       = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FACTOR_APPSWITCH    = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FACTOR_FLIP         = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FACTOR_ANYTHING     = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FACTORZ_COUNT       = <span class="number">11</span>;   </span><br></pre></td></tr></table></figure><p>所以对应的事件解释为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//   0: 15.0%   触摸事件TOUCH，--pct-touch</span><br><span class="line">//   1: 10.0%   手势事件MOTION, --pct-motion</span><br><span class="line">//   2: 2.0%    两指缩放事件PINCHZOOM,--pct-pinchzoom</span><br><span class="line">//   3: 15.0%   轨迹球事件TRACKBALL,--pct-trackball</span><br><span class="line">//   4: -0.0%   屏幕旋转事件ROTATION, --pct-rotation</span><br><span class="line">//   5: 25.0%   基本导航事件nav, --pct-nav</span><br><span class="line">//   6: 15.0%   主要导航事件majornav, --pct-majornav</span><br><span class="line">//   7: 2.0%    系统按钮事件sysops, --pct-syskeys</span><br><span class="line">//   8: 2.0%    启动activity事件appswitch, --pct-appswitch</span><br><span class="line">//   9: 1.0%    键盘轻弹事件flip, --pct-flip</span><br><span class="line">//   10: 13.0%   其它事件,包括按键和不常用的按键，--pct-anyevent</span><br></pre></td></tr></table></figure><p><strong>伪随机时间流信息</strong></p><p>Monkey开始执行测试后，会顺序输出执行的事件流信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-----跳转到com.android.article.news里的activity.MainActivity这个活动-----</span><br><span class="line">:Switch: #Intent;action=android.intent.action.MAIN;category=android.intent.category.LAUNCHER;launchFlags=0x10200000;component=com.ss.android.article.news/.activity.MainActivity;end</span><br><span class="line"></span><br><span class="line">-----允许启动com.android.article.news里的activity.MainActivity这个活动-----</span><br><span class="line">    // Allowing start of Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.ss.android.article.news/.activity.MainActivity &#125; in package com.ss.android.article.news</span><br><span class="line">    </span><br><span class="line">-----延迟(可以在命令参数中设置延迟)-----</span><br><span class="line">Sleeping for 0 milliseconds</span><br><span class="line"></span><br><span class="line">-----触摸事件-----</span><br><span class="line">:Sending Touch (ACTION_DOWN): 0:(842.0,1801.0)</span><br></pre></td></tr></table></figure><p><strong>执行结果信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-----产生了100次事件-----</span><br><span class="line">Events injected: 100</span><br><span class="line">-----表示屏幕旋转信息-----</span><br><span class="line">:Sending rotation degree=0, persist=false</span><br><span class="line">-----表示丢弃的事件信息-----</span><br><span class="line">:Dropped: keys=1 pointers=0 trackballs=0 flips=0 rotations=0</span><br><span class="line">-----网络状态-----</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Network stats: elapsed time=700ms (0ms mobile, 0ms wifi, 700ms not connected)</span></span></span><br><span class="line">-----最终执行结果-----</span><br><span class="line">// Monkey finished</span><br></pre></td></tr></table></figure><h3 id="详细分析monkey日志"><a href="#详细分析monkey日志" class="headerlink" title="详细分析monkey日志"></a>详细分析monkey日志</h3></li><li><p>将执行Monkey生成的log，从手机中导出并打开查看该log；</p></li><li><p>在log的最开始都会显示Monkey执行的seed值、执行次数和测试的包名；</p></li><li><p>分析log中的具体信息，方法如下：</p><p>查看log中第一个Switch，主要是查看Monkey执行的是那一个Activity，譬如下面的log中，执行的是<strong>com.tencent.smtt.SplashActivity</strong>，在下一个swtich之间的，如果出现了崩溃或其他异常，可以在该Activity中查找问题的所在；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:Switch:#Intent;action=android.intent.action.MAIN;category=android.intent.category.LAUNCHER;launchFlags=0x10000000;component=com.tencent.smtt/.SplashActivity;end</span><br><span class="line"></span><br><span class="line">// Allowing start of Intent &#123;act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER]cmp=com.tencent.smtt/.SplashActivity &#125; in package com.tencent.smtt</span><br></pre></td></tr></table></figure><p><strong>Sending Pointer ACTION_MOVE</strong> 代表当前执行了一个滑动界面的操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:Sending Pointer ACTION_DOWN x=47.0 y=438.0</span><br><span class="line">:Sending Pointer ACTION_MOVE x=-2.0 y=-4.0</span><br></pre></td></tr></table></figure><p>如果Monkey测试顺利执行完成，在log的最后，会打印出当前执行事件的次数和所花费的时间；**// Monkey finished**代表执行完成。Monkey执行中断，在log的最后也能查看到当前已执行的次数。Monkey执行完成的log具体如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Events injected: 6000</span><br><span class="line">:Dropped: keys=0 pointers=9 trackballs=0 flips=0</span><br><span class="line">\## Network stats: elapsed time=808384ms (0ms mobile, 808384ms wifi, 0msnot connected)</span><br><span class="line">// Monkey finished</span><br></pre></td></tr></table></figure><p><strong>Sending Pointer ACTION_DOWN</strong>和<strong>Sending Pointer ACTION_UP</strong>代表当前执行了一个单击的操作；</p><p><strong>Sleeping for 500 milliseconds</strong>这句log是执行Monkey测试时，throttle设定的间隔时间，每出现一次，就代表一个事件；</p><p><strong>SendKey(ACTION_DOWN)</strong> //KEYCODE_DPAD_DOWN 代表当前执行了一个点击下导航键的操作；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">:Switch: #Intent;action=android.intent.action.MAIN;category=android.intent.category.LAUNCHER;launchFlags=0x10000000;component=wfh.LessonTable/.MainTable;end</span><br><span class="line"></span><br><span class="line">// Allowing start of Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=wfh.LessonTable/.MainTable &#125; in package wfh.LessonTable</span><br><span class="line"></span><br><span class="line">Sleeping for 0 milliseconds</span><br><span class="line"></span><br><span class="line">:SendKey (ACTION_DOWN): 21    // KEYCODE_DPAD_LEFT</span><br><span class="line"></span><br><span class="line">:SendKey (ACTION_UP): 21    // KEYCODE_DPAD_LEFT</span><br><span class="line"></span><br><span class="line">Sleeping for 0 milliseconds  //--------用－－throttle来设置一个起效的事件发生后时延时。</span><br><span class="line"></span><br><span class="line">:Sending Pointer ACTION_DOWN x=0.0 y=0.0</span><br><span class="line"></span><br><span class="line">:Sending Pointer ACTION_UP x=0.0 y=0.0</span><br><span class="line"></span><br><span class="line">Sleeping for 0 milliseconds</span><br><span class="line"></span><br><span class="line">:Sending Pointer ACTION_MOVE x=0.0 y=0.0</span><br></pre></td></tr></table></figure><p>当测试到ACTION_MOVE x=0.0 y=0.0这个动作时，发生了FC（Force Close）错误，以下为输出错误信息。同时在LogCat里面也有错误输出，而且LogCat里面的错误信息更为详细，在实际的测试中应该结合两者输出的信息进行调试程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// CRASH: wfh.LessonTable (pid 1973)</span><br><span class="line"></span><br><span class="line">// Short Msg: java.lang.NullPointerException</span><br><span class="line"></span><br><span class="line">// Long Msg: java.lang.NullPointerException</span><br><span class="line"></span><br><span class="line">// Build Label: android:generic/sdk/generic/:2.1-update1/ECLAIR/35983:eng/test-keys</span><br><span class="line"></span><br><span class="line">// Build Changelist: 35983</span><br><span class="line"></span><br><span class="line">// Build Time: 1273161972</span><br><span class="line"></span><br><span class="line">// ID:</span><br><span class="line"></span><br><span class="line">// Tag: AndroidRuntime</span><br><span class="line"></span><br><span class="line">// java.lang.NullPointerException:</span><br><span class="line"></span><br><span class="line">//   at android.widget.TabHost.dispatchKeyEvent(TabHost.java:279)</span><br><span class="line"></span><br><span class="line">//   at android.view.ViewGroup.dispatchKeyEvent(ViewGroup.java:748)</span><br><span class="line"></span><br><span class="line">** Monkey aborted due to error.</span><br><span class="line"></span><br><span class="line">Events injected: 190</span><br><span class="line"></span><br><span class="line">:Dropped: keys=0 pointers=11 trackballs=0 flips=0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Network stats: elapsed time=27954ms (27954ms mobile, 0ms wifi, 0ms not connected)</span></span></span><br><span class="line"></span><br><span class="line">** System appears to have crashed at event 190 of 200 using seed 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span></span><br></pre></td></tr></table></figure><p>开始monkey测试时android的LogCat输出的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">11-01 08:52:53.712: DEBUG/AndroidRuntime(2077): &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; AndroidRuntime START &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line"></span><br><span class="line">11-01 08:52:53.742: DEBUG/AndroidRuntime(2077): CheckJNI is ON</span><br><span class="line"></span><br><span class="line">11-01 08:52:54.453: DEBUG/AndroidRuntime(2077): ---</span><br></pre></td></tr></table></figure><p>以下为LogCat输出的错误信息，在以下的信息中首先从自己的包中找错误，如果没有自己的包的话就再找发生错误的包的第一个发生了异常。由错误提示可以看出很大的可能是因为TabHost引发的异常。经过查看代码发现是由于TabHost的编写不规范，TabHost与其中一个view放在了一起，在monkey测试做滚球上下滚动时当滚到TabHost时就发生了异常了。所以把TabHost与Activity分开写就不会出现些问题了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">11-01 08:53:27.113: ERROR/AndroidRuntime(1973): Uncaught handler: thread main exiting due to uncaught exception</span><br><span class="line"></span><br><span class="line">11-01 08:53:27.133: ERROR/AndroidRuntime(1973): java.lang.NullPointerException</span><br><span class="line"></span><br><span class="line">11-01 08:53:27.133: ERROR/AndroidRuntime(1973):   at android.widget.TabHost.dispatchKeyEvent(TabHost.java:279)</span><br><span class="line"></span><br><span class="line">11-01 08:53:27.133: ERROR/AndroidRuntime(1973):   at android.view.ViewGroup.dispatchKeyEvent(ViewGroup.java:748)</span><br></pre></td></tr></table></figure><h3 id="其他分析方法"><a href="#其他分析方法" class="headerlink" title="其他分析方法"></a>其他分析方法</h3></li><li><p>在日志中搜索关键字</p><p>1）搜索报告中的关键字“ANR”，看有无应用无响应的事件（Application Not Responding）</p><p>2）搜索报告中的关键字“crash”,看有无崩溃的事件</p><p>3）搜索报告中的关键字“exception”，看有无其他异常事件。（如果出现空指针， <strong>NullPointerException</strong>，需格外重视）</p><p>下面的属于monkey自己的问题。不用管。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:Sending Flip keyboardOpen=false</span><br><span class="line"></span><br><span class="line">Got IOException performing flipjava.io.IOException: write failed: EINVAL (Invalid argument)</span><br><span class="line"></span><br><span class="line">// Injection Failed</span><br></pre></td></tr></table></figure><p>4）内存泄露问题搜索”GC”（需进一步分析）</p></li><li><p>初步分析法： monkey出现错误后，一般的分析步骤</p><p>1）先找到出现错误的位置</p><p>2）查看出现错误之前2个switch之间的activity</p><p>3）手动执行事件，复现问题</p><p>4）若以上步骤还不能找出，产生错误时，有会seed值，输入相同的seed值，重新按照之前命令跑monkey</p></li><li><p>详细分析法</p><p>1） ANR问题：在日志中搜索“ANR”(“Application Not Responding”)，说明有bug，出现ANR，一般是主线程的响应超过5秒，或者BroadcastReceiver没有在10秒内作出响应。这个就是一个比较严重的缺陷。把耗时的操作另起线程来处理就可以了。</p><p>2）分析log中的具体信息：</p><p>查看log中第一个Switch，主要是查看Monkey执行的是那一个Activity，譬如下面的log中，执行的是com.tencent.smtt.SplashActivity，在下一个swtich之间的，如果出现了崩溃或其他异常，可以在该Activity中查找问题的所在。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:Switch:#Intent;action=android.intent.action.MAIN;category=android.intent.category.LAUNCHER;launchFlags=0x10000000;component=com.tencent.smtt/.SplashActivity;end</span><br><span class="line"></span><br><span class="line"> // Allowing start of Intent &#123;act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER]cmp=com.tencent.smtt/.SplashActivity &#125; in package com.tencent.smtt</span><br></pre></td></tr></table></figure><p>3)内存泄漏</p><p>a、内存泄漏弹出out of memory对话框</p><p>b、对于有内存泄漏但是没有单出out of memory对话框的情况，可以通过logcat文件GC出信息，(GC:java的垃圾回收机制)<br><strong>GC_FOR_ALLOC</strong>：因为在分配内存时候内存不够引起的<br><strong>GC_EXPLICIT：</strong>表明GC被显式请求触发的，如System.gc调用，<br><strong>GC_CONCCURRENT：</strong>表明GC在内存使用率达到一定的警戒值时候，自动触发<br><strong>GC_BEFORE_OOM：</strong>表明在虚拟机抛出内存不够异常oom之前，执行最后一次回收内存垃圾</p><p>c、发现内存泄露–内存报告分析（利用hprof参数的内存快照生成内存报告）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在发现内存泄露后，可以执行相同的monkey，只需多加一个参数--hprof</span> </span><br><span class="line">adb shell monkey -p 包名  --hprof --throttle 100  --pct-touch 50 --pct-motion 50 -v -v -v 1000 &gt;c:\monkey.txt</span><br></pre></td></tr></table></figure><p>如果指定了这个选项，monkey会在发送时间的前后生成app内存快照文件，一般会在手机设备的/data/misc目录下生成hprof的文件。</p><blockquote><ul><li> /data/misc  需要root权限，可以在手机上安装个RE查看或通过手机助手查看</li><li>文件转换：配置monkey测试时的sdk-tools下查看是否hprof-conv命令，在命令行输入hprof-conv -help得知文件转化用法，直接转化就行，由.hprof转化成.conv格式。</li><li>转化后的文件用eclipse的Memory Analyzer tool(MAT)查看（此插件可以下载），可以点击 Reports-&gt;Leak Suspects链接来生成报告。</li></ul></blockquote></li></ol><h3 id="结果分析脚本"><a href="#结果分析脚本" class="headerlink" title="结果分析脚本"></a>结果分析脚本</h3><p>首先第一步安装Android SDK，完成后。编写测试脚本，此脚本已经编写好来源于网络。具体大家可以从网上Google针对自己的情况再进行详细的编改。</p><ol><li><p>新建一个文件命名为：xxx.bat</p></li><li><p>复制粘贴以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line"> </span><br><span class="line">ECHO.:::::::::::::::::::::::::::::::::::::::::::::::::</span><br><span class="line"> </span><br><span class="line">ECHO.::             分析Monkey日志                    ::</span><br><span class="line"> </span><br><span class="line">ECHO.::             版本：V1.0.0                      ::</span><br><span class="line"> </span><br><span class="line">ECHO.:::::::::::::::::::::::::::::::::::::::::::::::::</span><br><span class="line"> </span><br><span class="line">REM 设置Monkey日志路径 </span><br><span class="line">SET monkeyLogFile=%<span class="built_in">cd</span>%\%date:~0,4%%date:~5,2%%date:~8,2%%time:~0,2%%time:~3,2%.txt</span><br><span class="line"> </span><br><span class="line">REM 方法二：直接将Monkey日志拖到此bat文件上</span><br><span class="line">IF NOT <span class="string">&quot;%1&quot;</span>==<span class="string">&quot;&quot;</span> (</span><br><span class="line"> </span><br><span class="line">SET monkeyLogFile=%1</span><br><span class="line"> </span><br><span class="line">) ELSE (</span><br><span class="line">ECHO.[ INFO ] Monkey执行中...</span><br><span class="line">REM Monkey执行命令</span><br><span class="line">adb shell monkey -p com.jd.b2r --throttle 500 --ignore-crashes --ignore-timeouts --ignore-security-exceptions --ignore-native-crashes --monitor-native-crashes -v -v -v 30000 &gt; <span class="string">&quot;%monkeyLogFile%&quot;</span></span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">ECHO.[ INFO ] Monkey日志: %monkeyLogFile%</span><br><span class="line"> </span><br><span class="line">ECHO.[ INFO ] 开始分析</span><br><span class="line"> </span><br><span class="line">SET blnException=0</span><br><span class="line"> </span><br><span class="line">ECHO.</span><br><span class="line"> </span><br><span class="line">ECHO.</span><br><span class="line"> </span><br><span class="line">REM 如果觉得分析太快，没有感觉，把下面注释去掉假装分析中，有停顿感</span><br><span class="line"> </span><br><span class="line">ping -n 2 127.0.0.1&gt;nul</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">::ANR日志</span><br><span class="line"> </span><br><span class="line">FOR /F <span class="string">&quot;delims=&quot;</span> %%a IN (<span class="string">&#x27;FINDSTR /C:&quot;ANR&quot; %monkeyLogFile%&#x27;</span>) DO (</span><br><span class="line"> </span><br><span class="line">    SET strANR=%%a</span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">::崩溃日志</span><br><span class="line"> </span><br><span class="line">FOR /F <span class="string">&quot;delims=&quot;</span> %%a IN (<span class="string">&#x27;FINDSTR /C:&quot;CRASH&quot; %monkeyLogFile%&#x27;</span>) DO (</span><br><span class="line"> </span><br><span class="line">    SET strCRASH=%%a</span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line">   </span><br><span class="line"> </span><br><span class="line">::异常日志</span><br><span class="line"> </span><br><span class="line">FOR /F <span class="string">&quot;delims=&quot;</span> %%a IN (<span class="string">&#x27;FINDSTR /C:&quot;Exception&quot; %monkeyLogFile%&#x27;</span>) DO (</span><br><span class="line"> </span><br><span class="line">    SET strException=%%a</span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">::正常</span><br><span class="line"> </span><br><span class="line">FOR /F <span class="string">&quot;delims=&quot;</span> %%a IN (<span class="string">&#x27;FINDSTR /C:&quot;Monkey finished&quot; %monkeyLogFile%&#x27;</span>) DO (</span><br><span class="line"> </span><br><span class="line">    SET strFinished=%%a</span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">IF NOT <span class="string">&quot;%strANR%&quot;</span> == <span class="string">&quot;&quot;</span> (</span><br><span class="line"> </span><br><span class="line">    ECHO.[ INFO ] 分析Monkey日志存在: ANR</span><br><span class="line"> </span><br><span class="line">    ECHO.[ INFO ] ------------------------------------</span><br><span class="line"> </span><br><span class="line">    ECHO.         <span class="string">&quot;%strANR%&quot;</span></span><br><span class="line"> </span><br><span class="line">    SET /a blnException+=1</span><br><span class="line"> </span><br><span class="line">    ECHO.</span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">IF NOT <span class="string">&quot;%strCRASH%&quot;</span> == <span class="string">&quot;&quot;</span> (</span><br><span class="line"> </span><br><span class="line">    ECHO.[ INFO ] 分析Monkey日志存在: CRASH</span><br><span class="line"> </span><br><span class="line">    ECHO.[ INFO ] ------------------------------------</span><br><span class="line"> </span><br><span class="line">    ECHO.         <span class="string">&quot;%strCRASH%&quot;</span></span><br><span class="line"> </span><br><span class="line">    SET /a blnException+=1</span><br><span class="line"> </span><br><span class="line">    ECHO.</span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">IF NOT <span class="string">&quot;%strException%&quot;</span> == <span class="string">&quot;&quot;</span> (</span><br><span class="line"> </span><br><span class="line">    ECHO.[ INFO ] 分析Monkey日志存在: 异常</span><br><span class="line"> </span><br><span class="line">    ECHO.[ INFO ] ------------------------------------</span><br><span class="line"> </span><br><span class="line">    ECHO.         <span class="string">&quot;%strException%&quot;</span></span><br><span class="line"> </span><br><span class="line">    SET /a blnException+=1</span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">IF NOT <span class="string">&quot;%strFinished%&quot;</span> == <span class="string">&quot;&quot;</span> (</span><br><span class="line"> </span><br><span class="line">    ECHO.[ INFO ] 分析Monkey日志存在: 执行成功标记</span><br><span class="line"> </span><br><span class="line">    ECHO.[ INFO ] ------------------------------------</span><br><span class="line"> </span><br><span class="line">    ECHO.         <span class="string">&quot;%strFinished%&quot;</span></span><br><span class="line"> </span><br><span class="line">    ECHO.</span><br><span class="line"> </span><br><span class="line">) ELSE (</span><br><span class="line"> </span><br><span class="line">    IF %blnException% EQU 0 ECHO.[ INFO ] 分析Monkey日志结果: Monkey执行异常中断，请重新执行Monkey脚本!</span><br><span class="line"> </span><br><span class="line">    ECHO.</span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">REM 如果blnException不为0，说明存在异常，改变字体为淡紫色</span><br><span class="line"> </span><br><span class="line">IF %blnException% NEQ 0 (</span><br><span class="line"> </span><br><span class="line">    Color 0D</span><br><span class="line"> </span><br><span class="line">    ECHO.[ INFO ] 分析Monkey日志结果:存在异常日志，请手工再仔细检查！</span><br><span class="line"> </span><br><span class="line">    ECHO.</span><br><span class="line"> </span><br><span class="line">) ELSE (</span><br><span class="line"> </span><br><span class="line">    ECHO.[ INFO ] 分析Monkey日志结果:正常</span><br><span class="line"> </span><br><span class="line">    ECHO.</span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">ECHO.</span><br><span class="line"> </span><br><span class="line">ECHO.[ EXIT ] 按任意键关闭窗口...</span><br><span class="line"> </span><br><span class="line">PAUSE&gt;nul</span><br></pre></td></tr></table></figure></li><li><p>对脚本进行二次编辑</p><p>1）获取包名：</p><p>①aapt dump badging [XXaaayy.apk]，例如：package: name=’com.jddl.rbr’</p><p>②只记得大概，不记得详细包名。例如adb shell pm list packages b2</p><p><img src="https://images.mmzi.online//blog/20220831/202210180042617.png" alt="201908291501055"></p><p>2）修改命令<code>adb shell monkey -p com.jddl.rbr --throttle 500 --ignore-crashes --ignore-timeouts --ignore-security-exceptions --ignore-native-crashes --monitor-native-crashes -v -v -v 100000 &gt; &quot;%monkeyLogFile%&quot;</code>中的包名，如：com.jddl.rbr</p><p>3）修改monkey执行次数：-v -v -v 100000，这个100000代表执行100000次点击。</p><p>4）保存，连接手机，打开手机开发调试模式</p><p>5）Monkey命令停止：cmd命令下输入adb shell 进入命名模式，执行命令ps | grep monkey  查看进程ID，kill +进程ID，杀掉进程 </p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;认识Monkey&quot;&gt;&lt;a href=&quot;#认识Monkey&quot; class=&quot;headerlink&quot; title=&quot;认识Monkey&quot;&gt;&lt;/a&gt;认识Monkey&lt;/h2&gt;&lt;h3 id=&quot;什么是Monkey&quot;&gt;&lt;a href=&quot;#什么是Monkey&quot; class=&quot;headerlink&quot; title=&quot;什么是Monkey&quot;&gt;&lt;/a&gt;什么是Monkey&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;又指“猴子测试”，是指没有测试经验对计算机根本不了解的人，不知道任何程序的交互知识，给他一个程序，就会针对他看到的页面进行操作。这种测试方式在产品早期会找到很多bug，为&lt;strong&gt;用户节省&lt;/strong&gt;不少的&lt;strong&gt;时间&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Android的SDK 里面，Monkey的tools是一个命令行工具，当连接Android设备时，只要在命令行里输入相应命令就能运行tools。&lt;/li&gt;
&lt;li&gt;Monkey是Androld中的一个命令行工具，可以运行在模拟器里或实际设备中。它向系统发送伪&lt;strong&gt;随机的用户事件流&lt;/strong&gt;（如按键输入、触摸屏输入、手势输入等），实现对正在开发的应用程序进行测试。&lt;strong&gt;Monkey测试是一种为了测试软件的稳定性、健壮性的快速有效的方法&lt;/strong&gt;。</summary>
    
    
    
    <category term="Monkey" scheme="https://dyasher.github.io/categories/Monkey/"/>
    
    <category term="自动化测试" scheme="https://dyasher.github.io/categories/Monkey/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="测试" scheme="https://dyasher.github.io/categories/Monkey/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Monkey" scheme="https://dyasher.github.io/tags/Monkey/"/>
    
    <category term="自动化测试" scheme="https://dyasher.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="压力测试" scheme="https://dyasher.github.io/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客增加Valine/Gitalk评论插件</title>
    <link href="https://dyasher.github.io/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/"/>
    <id>https://dyasher.github.io/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</id>
    <published>2021-07-10T13:27:49.000Z</published>
    <updated>2022-08-25T14:14:11.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用原因"><a href="#使用原因" class="headerlink" title="使用原因"></a>使用原因</h2><p>hexo博客建立后，一直使用原来主题所带的评论功能，但是由于项目作者已经不再维护，服务器已经关闭，所以评论功能一直存在问题，但又不想关闭评论功能。所以看了很多帖子和试过很多评论插件，最后得出以下两种可用插件。由于多说、网易云跟帖已经凉凉，畅言需要备案，来必力经常显示异常，Disqus国内无法访问，gitment（和部署在GitHub的博客冲突）也有许多问题，因此主要来介绍<a href="https://valine.js.org/">Valine</a>/<a href="https://github.com/gitalk/gitalk">Gitalk</a>这两款评论插件。<a id="more"></a></p><h2 id="Gitalk插件"><a href="#Gitalk插件" class="headerlink" title="Gitalk插件"></a>Gitalk插件</h2><ol><li><p><strong>注册 OAuth Application</strong></p><p>当别人评论你的文章时，会需要它是授权。点击<a href="https://github.com/settings/applications/new">注册 OAuth Application</a>进行注册，注册界面如下：</p><p><img src="https://images.mmzi.online//blog/202208252213351.png"></p></li><li><p><strong>配置 _config.yml 文件</strong></p><p>打开<strong>themes_config.yml</strong>，增加如下代码。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#6、gitalk评论</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">githubID:</span> <span class="string">填写你的</span> <span class="string">github</span> <span class="string">账户名即可</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">&#x27;repo 名字为可新建一个repo 或者使用博客托管的 repo 都行。&#x27;</span></span><br><span class="line"><span class="attr">ClientID:</span> <span class="string">&#x27;就是上步骤中注册的获取的信息&#x27;</span></span><br><span class="line"><span class="attr">ClientSecret:</span> <span class="string">&#x27;就是上步骤中注册的获取的信息&#x27;</span></span><br><span class="line"><span class="attr">adminUser:</span> <span class="string">填写你的</span> <span class="string">github</span> <span class="string">账户名即可</span></span><br><span class="line"><span class="attr">distractionFreeMode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>新增gitalk.ejs文件</strong></p><p>在<strong>themes/yilia/layout/_partial/post</strong>目录下新增gitalk.ejs文件，文件内写入如下代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;gitalk-container&quot; style&#x3D;&quot;padding: 0px 30px 0px 30px;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">if(&lt;%&#x3D;theme.gitalk.enable%&gt;)&#123;</span><br><span class="line">    var gitalk &#x3D; new Gitalk(&#123;</span><br><span class="line">    clientID: &#39;&lt;%&#x3D;theme.gitalk.ClientID%&gt;&#39;,</span><br><span class="line">    clientSecret: &#39;&lt;%&#x3D;theme.gitalk.ClientSecret%&gt;&#39;,</span><br><span class="line">    repo: &#39;&lt;%&#x3D;theme.gitalk.repo%&gt;&#39;,</span><br><span class="line">    owner: &#39;&lt;%&#x3D;theme.gitalk.githubID%&gt;&#39;,</span><br><span class="line">    admin: [&#39;&lt;%&#x3D;theme.gitalk.adminUser%&gt;&#39;],</span><br><span class="line">    id: &#39;&lt;%&#x3D; page.date %&gt;&#39;,</span><br><span class="line">    distractionFreeMode: &#39;&lt;%&#x3D;theme.gitalk.distractionFreeMode%&gt;&#39;</span><br><span class="line">&#125;)</span><br><span class="line">gitalk.render(&#39;gitalk-container&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改comment.scss文件</strong></p><p>修改<strong>themes/yilia/source-src/css</strong>目录下comment.scss文件。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#disqus_thread</span>, <span class="selector-class">.duoshuo</span>, <span class="selector-class">.cloud-tie-wrapper</span>, <span class="selector-id">#SOHUCS</span>, <span class="selector-id">#gitment-ctn</span>, <span class="selector-id">#gitalk-container</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">30px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#SOHUCS</span> &#123;</span><br><span class="line">    <span class="selector-id">#SOHU_MAIN</span> <span class="selector-class">.module-cmt-list</span> <span class="selector-class">.block-cont-gw</span> &#123;</span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#c8c8c8</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>新增gitalk相关的配置代码</strong></p><p>在<strong>themes/yilia/layout/_partial</strong>目录下的article.ejs文件内新增gitalk相关的配置代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.gitalk.enable)&#123; %&gt;</span><br><span class="line">&lt;%- partial(&#39;post&#x2F;gitalk&#39;, &#123;</span><br><span class="line">key: post.slug,</span><br><span class="line">title: post.title,</span><br><span class="line">url: config.url+url_for(post.path)</span><br><span class="line">&#125;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这段代码不可在尾部添加，应该添加至这里</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line">&#x2F;&#x2F;添加到这里</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>重新部署</strong></p><p>配置完毕后，重新部署，即可看到效果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p><img src="https://images.mmzi.online//blog/202208252213658.png"></p></li></ol><h2 id="Valine插件"><a href="#Valine插件" class="headerlink" title="Valine插件"></a>Valine插件</h2><ol><li><p><strong>获取 APP ID 和 APP KEY</strong></p><ul><li><a href="https://leancloud.cn/dashboard/login.html#/signup">点击这里</a>登录或注册Leancloud，或者<a href="https://avoscloud.com/">点击这里</a><a href="https://leancloud.cn/dashboard/applist.html#/newapp">点击这里</a></li><li>创建应用，应用名随意填写。</li><li>选择刚刚创建的应用&gt;设置&gt;选择应用 Key，然后你就能看到你的APP ID和APP KEY了，参考下图：</li></ul><p><img src="https://images.mmzi.online//blog/202208252213435.png"></p><ul><li>为了您的数据安全，请填写应用&gt;设置&gt;安全设置中的Web 安全域名</li></ul></li><li><p><strong>修改yilia主题下的_config.yml文件，添加valine配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># valine配置</span></span><br><span class="line"><span class="attr">valine_appid:</span> <span class="string">&#x27;填写leancloud的appid&#x27;</span></span><br><span class="line"><span class="attr">valine_appkey:</span> <span class="string">&#x27;填写leancloud的appkey&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>修改themes/yilia/layout/_partial/article.ejs，添加一段代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.valine_appid &amp;&amp; theme.valine_appkey)&#123; %&gt;</span><br><span class="line">    &lt;%- partial(&#39;post&#x2F;valine&#39;, &#123;</span><br><span class="line">        key: post.slug,</span><br><span class="line">        title: post.title,</span><br><span class="line">        url: config.url+url_for(post.path)</span><br><span class="line">      &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这段代码不可在尾部添加，应该添加至</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line">&#x2F;&#x2F;添加到这里</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>新增themes/yilia/layout/_partial/post/valine.ejs</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;comment&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn1.lncld.net&#x2F;static&#x2F;js&#x2F;3.0.4&#x2F;av-min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&#39;&#x2F;&#x2F;unpkg.com&#x2F;valine&#x2F;dist&#x2F;Valine.min.js&#39;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Valine(&#123;</span><br><span class="line">el: &#39;#comment&#39; ,</span><br><span class="line">notify:false,</span><br><span class="line">verify:false,</span><br><span class="line">appId: &#39;&lt;%&#x3D;theme.valine_appid%&gt;&#39;,</span><br><span class="line">appKey: &#39;&lt;%&#x3D;theme.valine_appkey%&gt;&#39;,</span><br><span class="line">placeholder: &#39;ヾﾉ≧∀≦)o欢迎评论!&#39;,</span><br><span class="line">path:window.location.pathname,</span><br><span class="line">avatar:&#39;mm&#39; </span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>重新部署</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p><img src="https://images.mmzi.online//blog/202208252214662.png"></p></li><li><p><strong>Valine 评论系统中的邮件提醒设置</strong></p><p>进入Leancloud&gt;选择你的评论所存放的应用&gt;设置&gt;邮件模板，按下图设置好用于重置密码的邮件主题&gt;然后保存。</p><p><img src="https://images.mmzi.online//blog/202208252214989.jpeg"></p><p>修改邮件主题：你在的评论收到了新的回复。</p><p>修改内容：将下面的代码复制到“内容”中，并将其中的你的网址首页链接改为你的网址首页链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Hi, &#123;&#123;username&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">你在 &#123;&#123;appname&#125;&#125; 的评论收到了新的回复，请点击查看：</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href&#x3D;&quot;你的网址首页链接&quot; style&#x3D;&quot;display: inline-block; padding: 10px 20px; border-radius: 4px; background-color: #3090e4; color: #fff; text-decoration: none;&quot;&gt;马上查看&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>点击“保存”按钮。</p><p>修改yilia主题配置文件，位置：你的网站根目录_partial.ejs，将notify和verify的属性修改为true。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;comment&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn1.lncld.net&#x2F;static&#x2F;js&#x2F;3.0.4&#x2F;av-min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&#39;&#x2F;&#x2F;unpkg.com&#x2F;valine&#x2F;dist&#x2F;Valine.min.js&#39;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Valine(&#123;</span><br><span class="line">el: &#39;#comment&#39; ,</span><br><span class="line">notify:true,</span><br><span class="line">verify:true,</span><br><span class="line">appId: &#39;&lt;%&#x3D;theme.valine_appid%&gt;&#39;,</span><br><span class="line">appKey: &#39;&lt;%&#x3D;theme.valine_appkey%&gt;&#39;,</span><br><span class="line">placeholder: &#39;吾以为inkbottle必有高论，岂期出此鄙言！吾有一言，诸军静听&#39;,</span><br><span class="line">path:window.location.pathname,</span><br><span class="line">avatar:&#39;mm&#39; </span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>配置完毕后，重新部署，需等待一段时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>进行测试，查看自己评论的回复能否收到邮件提醒。</p><p>配置完成！</p><blockquote><p>注意事项： </p><ul><li>发送次数过多，可能会暂时被Leancloud 屏蔽邮件发送功能。</li><li>由于邮件提醒功能使用的Leancloud的密码重置邮件提醒，只能传递昵称、邮箱两个属性，所以邮件提醒链&gt; 接无法直达指定文章页。请悉知。</li><li>开启邮件提醒会默认开启验证码选项。</li><li>该功能目前还在测试阶段，谨慎使用。  </li><li>目前邮件提醒正处于测试阶段，仅在子级对存在邮件地址的父级发表评论时发送邮件。</li></ul></blockquote></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;使用原因&quot;&gt;&lt;a href=&quot;#使用原因&quot; class=&quot;headerlink&quot; title=&quot;使用原因&quot;&gt;&lt;/a&gt;使用原因&lt;/h2&gt;&lt;p&gt;hexo博客建立后，一直使用原来主题所带的评论功能，但是由于项目作者已经不再维护，服务器已经关闭，所以评论功能一直存在问题，但又不想关闭评论功能。所以看了很多帖子和试过很多评论插件，最后得出以下两种可用插件。由于多说、网易云跟帖已经凉凉，畅言需要备案，来必力经常显示异常，Disqus国内无法访问，gitment（和部署在GitHub的博客冲突）也有许多问题，因此主要来介绍&lt;a href=&quot;https://valine.js.org/&quot;&gt;Valine&lt;/a&gt;/&lt;a href=&quot;https://github.com/gitalk/gitalk&quot;&gt;Gitalk&lt;/a&gt;这两款评论插件。</summary>
    
    
    
    <category term="Hexo" scheme="https://dyasher.github.io/categories/Hexo/"/>
    
    <category term="评论" scheme="https://dyasher.github.io/categories/Hexo/%E8%AF%84%E8%AE%BA/"/>
    
    <category term="插件" scheme="https://dyasher.github.io/categories/Hexo/%E8%AF%84%E8%AE%BA/%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="Hexo" scheme="https://dyasher.github.io/tags/Hexo/"/>
    
    <category term="评论插件" scheme="https://dyasher.github.io/tags/%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/"/>
    
    <category term="Valine" scheme="https://dyasher.github.io/tags/Valine/"/>
    
    <category term="Gitalk" scheme="https://dyasher.github.io/tags/Gitalk/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt安装OpenClash步骤</title>
    <link href="https://dyasher.github.io/2021/05/28/OpenWrt%E5%AE%89%E8%A3%85OpenClash%E6%AD%A5%E9%AA%A4/"/>
    <id>https://dyasher.github.io/2021/05/28/OpenWrt%E5%AE%89%E8%A3%85OpenClash%E6%AD%A5%E9%AA%A4/</id>
    <published>2021-05-28T06:31:45.000Z</published>
    <updated>2022-08-25T14:13:09.321Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.right.com.cn/forum/index.php">恩山无线论坛</a>找到相应的固件安装openWrt固件。 进入<a href="https://github.com/vernesong/OpenClash">OpenClash项目</a>下载最新OpenClash固件。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><p>1、打开 PuTTY或者直接实用openWrt中的的TTYD终端，输入软路由的 IP，选择 SSH 模式，进入。</p><a id="more"></a><p>2、安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">opkg update</span><br><span class="line">opkg install luci</span><br><span class="line">opkg install luci-base</span><br><span class="line">opkg install iptables</span><br><span class="line">opkg install dnsmasq-full</span><br><span class="line">opkg install coreutils</span><br><span class="line">opkg install coreutils-nohup</span><br><span class="line">opkg install bash</span><br><span class="line">opkg install curl</span><br><span class="line">opkg install jsonfilter</span><br><span class="line">opkg install ca-certificates</span><br><span class="line">opkg install ipset</span><br><span class="line">opkg install ip-full</span><br><span class="line">opkg install iptables-mod-tproxy</span><br><span class="line">opkg install kmod-tun  #TUN模式</span><br><span class="line">opkg install luci-compat</span><br></pre></td></tr></table></figure><p>3、找到 OpenClash 的 ipk 安装包，右键上传到软路由的 tmp 文件夹内（根据实际情况）。</p><p><img src="https://images.mmzi.online//blog/202208252212095.png"></p><p>4、回到命令行，输入（xxx 替换为安装包全名）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install xxx.ipk</span><br></pre></td></tr></table></figure><p>5、回到软路由页面，刷新，看见服务选项卡出现 OpenClash 表示安装成功。<br><img src="https://images.mmzi.online//blog/202208252213168.png"></p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a><strong>卸载</strong></h2><p>这里有一个需要注意的地方，就是直接执行。<br>opkg remove xxxx.ipk是没有用的，因为安装好以后的文件名是和原来的.ipk文件名不一样的。<br><strong>步骤：</strong></p><ol><li>执行 opkg list_installed,找到想卸载的文件名称。</li><li>执行opkg remove 文件名（就是上一步找到的名称）。</li></ol><p>卸载成功的界面：<br><img src="https://images.mmzi.online//blog/202208252213605.png"></p><hr><p><strong>注意点：</strong></p><ul><li>如果原来有的软件要降级需要线卸载掉原来的版本。</li><li>安装软件需要注意该软件的依赖包是否存在。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.right.com.cn/forum/index.php&quot;&gt;恩山无线论坛&lt;/a&gt;找到相应的固件安装openWrt固件。 进入&lt;a href=&quot;https://github.com/vernesong/OpenClash&quot;&gt;OpenClash项目&lt;/a&gt;下载最新OpenClash固件。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;1、打开 PuTTY或者直接实用openWrt中的的TTYD终端，输入软路由的 IP，选择 SSH 模式，进入。&lt;/p&gt;</summary>
    
    
    
    <category term="OpenWrt" scheme="https://dyasher.github.io/categories/OpenWrt/"/>
    
    <category term="OpenClash" scheme="https://dyasher.github.io/categories/OpenWrt/OpenClash/"/>
    
    
    <category term="软路由" scheme="https://dyasher.github.io/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>群晖Docker搭建MC服务器</title>
    <link href="https://dyasher.github.io/2021/05/28/%E7%BE%A4%E6%99%96Docker%E6%90%AD%E5%BB%BAMC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://dyasher.github.io/2021/05/28/%E7%BE%A4%E6%99%96Docker%E6%90%AD%E5%BB%BAMC%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-05-28T05:35:58.000Z</published>
    <updated>2022-08-25T14:18:26.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前提简要"><a href="#前提简要" class="headerlink" title="前提简要"></a>前提简要</h1><ol><li><p><strong>为了保证通用性</strong><br>这里不是特别制作的宝塔面板docker镜像，而是在docker中运行官方centos 7，然后 在centos 中安装宝塔面板。</p></li><li><p><strong>未来保证安全性</strong><br>所有镜像（软件）都是官方原版，没有任何私货。<a id="more"></a></p></li><li><p><strong>本操作需要有初步的Linux知识。</strong></p></li><li><p><strong>Docker部署的好处</strong></p><ul><li>centos作为一个Linux系统，可以运行任何你想运行的软件，具有高度的通用性和自由性。</li><li>docker作为沙盒，你可以任意折腾而不会损坏群晖主系统，保证了数据的安全。</li></ul></li></ol><h1 id="Docker下部署CentOS7"><a href="#Docker下部署CentOS7" class="headerlink" title="Docker下部署CentOS7"></a>Docker下部署CentOS7</h1><h2 id="创建-运行CentOS-7的docker容器"><a href="#创建-运行CentOS-7的docker容器" class="headerlink" title="创建 运行CentOS 7的docker容器"></a>创建 运行CentOS 7的docker容器</h2><h3 id="选择镜像"><a href="#选择镜像" class="headerlink" title="选择镜像"></a>选择镜像</h3><p>这里我们选择官方的centos镜像，镜像说明地址 <a href="https://registry.hub.docker.com/_/centos/">https://registry.hub.docker.com/_/centos/</a><br>下载时选择 7 就好了。请勿下载其他非官方镜像，会出现莫名其妙的进程。</p><p><img src="https://images.mmzi.online//blog/202208252215935.png"></p><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><ul><li><p>除了下面特别说明的两个地方需要注意意外。</p></li><li><p>至于性能分配请各自看心情和主机性能。</p></li><li><p>装载路径可以不用设置。</p></li><li><p>端口一定要为后面的服务开启。</p></li></ul><p><img src="https://images.mmzi.online//blog/202208252215499.png"></p><ul><li><p>勾选使用高权限执行容器<br><strong>此步骤非常重要</strong>，实测不勾选会导致systemd服务无法使用。centos 7开启ssh服务</p><p><img src="https://images.mmzi.online//blog/202208252216550.png"></p></li><li><p>加入 /usr/sbin/init  命令</p><p><strong>此步骤非常重要</strong>，如果创建容器时没有这个命令会导致centos 7 中的systemd服务无法使用。<br>如果systemd服务无法使用，当容器重启后，会导致centos中很多服务和进程无法启动。</p><p><img src="https://images.mmzi.online//blog/202208252216282.png"></p></li><li><p>端口映射，映射部分常用端口，方便后面操作</p><p><img src="https://images.mmzi.online//blog/202208252216166.png"></p><p><img src="https://images.mmzi.online//blog/202208252216051.png"></p></li></ul><h2 id="CentOS-7开启ssh服务"><a href="#CentOS-7开启ssh服务" class="headerlink" title="CentOS 7开启ssh服务"></a>CentOS 7开启ssh服务</h2><ol><li><p>在群晖ssh中进入centos 7 docker容器，在docker上也可以</p><p>在群晖docker上操作</p><p><img src="https://images.mmzi.online//blog/202208252216121.png"></p><p><img src="https://images.mmzi.online//blog/202208252216664.png"></p><p>在SSH中操作，连接群晖SSH，输入以下代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it centos1 /bin/bash </span><br></pre></td></tr></table></figure></li><li><p>修改root密码使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure></li><li><p>安装并启用ssh服务</p><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openssh-server -y</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">如果没有vim就先安装</span></span><br><span class="line">yum install vim -y</span><br><span class="line"></span><br><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">去除<span class="comment">#号，修改值如下</span></span></span><br><span class="line">Port=22   设置SSH的端口号是22(默认端口号为22)</span><br><span class="line">PasswordAuthentication  yes    启用口令认证方式</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start sshd.service</span><br></pre></td></tr></table></figure><h1 id="CentOS7下部署MC服务器"><a href="#CentOS7下部署MC服务器" class="headerlink" title="CentOS7下部署MC服务器"></a>CentOS7下部署MC服务器</h1></li></ol><h2 id="安装JAVA环境"><a href="#安装JAVA环境" class="headerlink" title="安装JAVA环境"></a>安装JAVA环境</h2><p>安装Java环境，MC的运行必备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载JDK安装包，也可以自己去官网下载</span></span><br><span class="line">wget https://img.zeruns.tech/down/jdk-8u261-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建安装目录</span></span><br><span class="line">mkdir /usr/local/java/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压当前目录下的JDK压缩文件</span></span><br><span class="line">tar -zxvf jdk-8u261-linux-x64.tar.gz -C /usr/local/java/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量(安装 VIM 输入 yum -y install vim)</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在末尾添加对应变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">滚动光标到末尾 按下 键盘上的 INS 键,切换至插入模式</span></span><br><span class="line"><span class="meta">#</span><span class="bash">输入这几串内容后 按ESC退出插入模式</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">然后按下 Shift + ; 输入 wq 并回车保存</span></span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_261</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 应用修改后的环境变量</span></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 软链接程序到环境变量中</span></span><br><span class="line">ln -s /usr/local/java/jdk1.8.0_261/bin/java /usr/bin/java</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试是否安装正常，显示 java version <span class="string">&quot;1.8.0_261&quot;</span> 则为正常</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="面板安装"><a href="#面板安装" class="headerlink" title="面板安装"></a>面板安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到用户目录</span></span><br><span class="line">cd ~</span><br><span class="line"><span class="meta">#</span><span class="bash">安装wget</span></span><br><span class="line">yum -y install wget</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载淘宝镜像源的node运行环境</span></span><br><span class="line">wget https://npm.taobao.org/mirrors/node/v12.16.1/node-v12.16.1-linux-x64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf node-v12.16.1-linux-x64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 链接程序到环境变量中</span></span><br><span class="line">ln -s ~/node-v12.16.1-linux-x64/bin/node /usr/bin/node</span><br><span class="line">ln -s ~/node-v12.16.1-linux-x64/bin/npm /usr/bin/npm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试是否安装正常，显示 v12.16.1 则为正常</span></span><br><span class="line">node -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 克隆仓库(若没有 git，请安装它 yum install git)</span></span><br><span class="line">git clone https://gitee.com/Suwingser/MCSManager.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入目录</span></span><br><span class="line">cd MCSManager/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖库</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动面板</span></span><br><span class="line">npm start </span><br><span class="line"><span class="meta">#</span><span class="bash"> 或 node app.js</span></span><br></pre></td></tr></table></figure><p>安装完成后访问 <a href="">http://你的ip:23333/</a> 即可进入面板。</p><ul><li><p>默认账号：#master</p></li><li><p>默认密码：123456</p></li></ul><p>测试能正常登陆后回到ssh终端按Ctrl+C来结束面板，接下来设置让面板保持后台运行</p><h2 id="设置后台运行和开机自启动"><a href="#设置后台运行和开机自启动" class="headerlink" title="设置后台运行和开机自启动"></a>设置后台运行和开机自启动</h2><ol><li><p>创建并编辑文件<code>vim /lib/systemd/system/mcsm.service</code>，输入以下内容</p><p>按下 键盘上的 <strong>i</strong> 键,切换至插入模式。</p><p>输入这几串内容后（可右键直接粘贴） 按<strong>ESC</strong>退出插入模式。</p><p>然后按下 <strong>Shift + ;</strong> 输入 <strong>wq</strong> 并回车保存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=MCSManager</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/node /root/MCSManager/app.js</span><br><span class="line">Restart=always</span><br><span class="line">Environment=PATH=/usr/bin:/usr/local/bin:/usr/local/node/bin</span><br><span class="line">Environment=NODE_ENV=production</span><br><span class="line">WorkingDirectory=/root/MCSManager/</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>执行下面的命令重载 Systemd 和 启用服务开机自启，这样服务就配置完成了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable mcsm</span><br></pre></td></tr></table></figure></li><li><p>创建完成后，即可使用 <code>systemctl</code> 管理面板启动与关闭。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">开启：</span></span><br><span class="line">systemctl start mcsm</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭:</span> </span><br><span class="line">systemctl stop mcsm</span><br><span class="line"><span class="meta">#</span><span class="bash">状态:</span> </span><br><span class="line">systemctl status mcsm</span><br></pre></td></tr></table></figure><h1 id="使用面板创建MC服务器"><a href="#使用面板创建MC服务器" class="headerlink" title="使用面板创建MC服务器"></a>使用面板创建MC服务器</h1></li></ol><p>接着登陆管理面板，点击<strong>创建新实例应用</strong>，然后点击<strong>快速创建</strong>。</p><p><img src="https://images.mmzi.online//blog/202208252216012.png"></p><p><img src="https://images.mmzi.online//blog/202208252216088.png"></p><p><img src="https://images.mmzi.online//blog/202208252216962.png"></p><p><img src="https://images.mmzi.online//blog/202208252216836.png"></p><p>点击<strong>管理</strong>，再点击<strong>文件在线管理</strong></p><p><img src="https://images.mmzi.online//blog/202208252216508.png"></p><p><img src="https://images.mmzi.online//blog/202208252217786.png"></p><p>点击<strong>上传文件</strong>将刚刚下载的forge服务端的压缩包上传，然后点击<strong>解压ZIP</strong></p><p><img src="https://images.mmzi.online//blog/202208252217346.png"></p><p><img src="https://images.mmzi.online//blog/202208252217400.png"></p><p>点击刚刚解压出来的目录进入目录，然后<strong>全选文件</strong>，点<strong>复制</strong>，再点击<strong>上级目录</strong>，然后点<strong>剪切</strong></p><p><img src="https://images.mmzi.online//blog/202208252217754.png"></p><p><img src="https://images.mmzi.online//blog/202208252217672.png"></p><p>接着回到服务器管理那里，点击模拟型终端，点击开启。</p><p><img src="https://images.mmzi.online//blog/202208252217972.png"></p><p><img src="https://images.mmzi.online//blog/202208252217500.png"></p><p>修改配置文件，把正版认证关闭</p><p><img src="https://images.mmzi.online//blog/202208252217391.png"></p><p><img src="https://images.mmzi.online//blog/202208252217373.png"></p><p>修改配置eula.txt文件</p><p><img src="https://images.mmzi.online//blog/202208252217787.png"></p><p><img src="https://images.mmzi.online//blog/202208252217590.png"></p><p>然后出来类似图片中的信息就表示服务器开启成功了，可以进服游戏了。</p><p><img src="https://images.mmzi.online//blog/202208252218773.png"></p><p>进入游戏</p><p><img src="https://images.mmzi.online//blog/202208252218045.png" alt="WechatIMG66"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前提简要&quot;&gt;&lt;a href=&quot;#前提简要&quot; class=&quot;headerlink&quot; title=&quot;前提简要&quot;&gt;&lt;/a&gt;前提简要&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;为了保证通用性&lt;/strong&gt;&lt;br&gt;这里不是特别制作的宝塔面板docker镜像，而是在docker中运行官方centos 7，然后 在centos 中安装宝塔面板。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;未来保证安全性&lt;/strong&gt;&lt;br&gt;所有镜像（软件）都是官方原版，没有任何私货。</summary>
    
    
    
    <category term="Docker" scheme="https://dyasher.github.io/categories/Docker/"/>
    
    <category term="MC" scheme="https://dyasher.github.io/categories/Docker/MC/"/>
    
    <category term="群晖" scheme="https://dyasher.github.io/categories/Docker/MC/%E7%BE%A4%E6%99%96/"/>
    
    <category term="CentOS" scheme="https://dyasher.github.io/categories/Docker/MC/%E7%BE%A4%E6%99%96/CentOS/"/>
    
    
    <category term="Docker" scheme="https://dyasher.github.io/tags/Docker/"/>
    
    <category term="群晖" scheme="https://dyasher.github.io/tags/%E7%BE%A4%E6%99%96/"/>
    
    <category term="CentOS" scheme="https://dyasher.github.io/tags/CentOS/"/>
    
    <category term="宝塔" scheme="https://dyasher.github.io/tags/%E5%AE%9D%E5%A1%94/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习——无法启动容器OCI runtime create failed: container with id exists</title>
    <link href="https://dyasher.github.io/2021/04/07/Docker%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8OCI-runtime-create-failed-container-with-id-exists/"/>
    <id>https://dyasher.github.io/2021/04/07/Docker%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8OCI-runtime-create-failed-container-with-id-exists/</id>
    <published>2021-04-06T16:03:40.000Z</published>
    <updated>2022-08-25T14:15:40.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决群晖Docker无法启动容器OCI-runtime-create-failed-container-with-id-exists报错"><a href="#解决群晖Docker无法启动容器OCI-runtime-create-failed-container-with-id-exists报错" class="headerlink" title="解决群晖Docker无法启动容器OCI runtime create failed: container with id exists报错"></a>解决群晖Docker无法启动容器OCI runtime create failed: container with id exists报错</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><strong>硬件：</strong>黑群晖918+</p><p><strong>DSM：</strong>DSM 6.2.1-23824 Update 1</p><p><strong>Docker：</strong>18.09.0-0519</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>以最高权限装载第一个Container之后，尝试启动第二个Container的时候显示报错：Start container jellyfin-jellyfin1 failed: {“message”:”OCI runtime create failed: container with id exists: b6803073dc958105e437ebe000efeab37d215c3e054af3fcdbcccc7fdd289a7e: unknown”}.<a id="more"></a></p><p><img src="https://images.mmzi.online//blog/202208252215996.png" alt="错误补图1"></p><p><img src="https://images.mmzi.online//blog/202208252215980.png" alt="错误显示2"></p><h2 id="网上提供的方法："><a href="#网上提供的方法：" class="headerlink" title="网上提供的方法："></a>网上提供的方法：</h2><h3 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h3><ol><li>首次安装了CentOS官方镜像，名称CentWeb，版本Latest，启用Init，启用“自动重启”，运行正常</li><li>再次创建第二个Docker从CentOS官方镜像名称CentKMS，使用同样方法，启用init，启用“自动重启”功能，启动失败，显示错误信息OCI runtime create failed: container with id exist</li><li>删除名称CentKMS的容器，下载第三方luodaoyi/KMS-Server:latest，创建容器名KMSServer，启动依然提示错误信息OCI runtime create failed: container with id exist</li><li>尝试将容器CentWeb关闭，再次开启KMSServer，结果报错，尝试开启CentWeb，也报错，所有容器均无法启动。</li><li>重启NAS，容器CentWeb恢复运作，但是KMSServer依然无法运作。</li></ol><h3 id="故障排查"><a href="#故障排查" class="headerlink" title="故障排查"></a>故障排查</h3><ol><li><p>使用SSH登录群晖，并切换至root账户。</p></li><li><p>检查Docker进程，显示Container状态为Created，但是并没有启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@nas:~# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">9774cfebe013        luodaoyi/kms-server:latest   &quot;/bin/sh -c &#x27;vlmcsdm…&quot;   6 days ago          Created             0.0.0.0:1688-&gt;1688/tcp   KMSServer</span><br><span class="line">4a9b4ca2b8fe        centos:latest                &quot;/usr/sbin/init&quot;         2 months ago        Up 13 hours         0.0.0.0:23-&gt;22/tcp     CentWeb</span><br></pre></td></tr></table></figure></li><li><p>搜索Docker日志文件位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@nas:/var/log# find ../ -name *docker* </span><br><span class="line">../packages/Docker/scripts/synodockerlogcollector.sh</span><br><span class="line">../packages/Docker/conf/upstart/pkg-Docker-dockerd.conf</span><br><span class="line">../log/Docker/docker.log</span><br></pre></td></tr></table></figure></li><li><p>删除所有Docker日志，重新启动Docker服务。</p></li><li><p>使用tail -f命令监测docker日志/log/Docker/docker.log，并准备复现问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@nas:/var/log/Docker# tail -f docker.log </span><br><span class="line">2021-03-05T22:14:25+08:00 NAS docker[15295]: ERRO[47569] a5fd8a554626d5ff5388b76b02d119a8e5f5cc40fbeb95012c9dc194fe0f328b cleanup: failed to delete container from containerd: no such container </span><br><span class="line">2021-03-05T22:14:25+08:00 NAS docker[15295]: ERRO[47569] Handler for POST /containers/luodaoyi-kms-server1/start returned error: cgroups: cannot find cgroup mount destination: unknown </span><br></pre></td></tr></table></figure></li><li><p>根据上面Logs的信息，我们可以清楚的看到当执行Container Start的操作时候，<strong>有个关键提示：“returned error: cgroups: cannot find cgroup mount destination”。</strong>这个报错很明显了，<strong>问题被指向了“无法挂载cgroup”。</strong></p></li><li><p>尝试谷歌搜索，在Docker的Github上找到了一样的问题，并且有了临时解决方案。</p><p><a href="https://andyx.net/go?_=adcffba5a3aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9mb3ItbGludXgvaXNzdWVzLzIxOQ==">https://github.com/docker/for-linux/issues/219</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@nas: mkdir /sys/fs/cgroup/systemd</span><br><span class="line">root@nas: mount -t cgroup -o none,name=systemd cgroup </span><br></pre></td></tr></table></figure><p>由于群晖系统比较特殊，默认是不能使用额外的安装包<em>（虽然有很多方法可以装载ipkg，但是为了安全和稳定就那就先放一放）</em></p></li><li><p>重新尝试启动Container，启动成功！进一步测试重启群晖，然后再次检查Container可以自动上线，至此问题已经解决。</p><blockquote><p>以上过程实质没有把问题解决，通过尝试重启解决不了问题，本人尝试多次重启，发现重启之后会出现一样的问题，而且出现只有少数服务启动成功。</p></blockquote></li></ol><h2 id="解决方案（亲测有效）"><a href="#解决方案（亲测有效）" class="headerlink" title="解决方案（亲测有效）"></a>解决方案（亲测有效）</h2><h3 id="问题产生的根本原因"><a href="#问题产生的根本原因" class="headerlink" title="问题产生的根本原因"></a>问题产生的根本原因</h3><p>经过测试，我的黑群晖服务器docker服务产生以上问题的根本原因是因为机器经常过热关机，这种机制是群晖保护系统的保护机制，当系统硬件温度到达机器能承受的固定点，机器就会异常关机，这时候docker也会异常关闭，所以导致以上问题。网上一些博客说是因为docker宿主主机关闭，docker没有关闭，docker容器的服务没有正常退出，但再次开机进入docker时就会产生冲突，就是原来强迫关闭的服务没有销毁，当再次开机打开docker时候会产生两个相同的id，所以出现OCI runtime create failed: container with id exists。</p><h3 id="实行方案"><a href="#实行方案" class="headerlink" title="实行方案"></a>实行方案</h3><p><strong>方法一</strong></p><p>避免因为宿主主机异常关机导致docker服务关闭后再开启产生该情况，对容器进行设置。</p><p><img src="https://images.mmzi.online//blog/202208252215798.png" alt="群晖docker设置"></p><p><strong>方法二</strong></p><ol><li><p>登陆SSH</p></li><li><p>输入以下代码挂载文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /sys/fs/cgroup/systemd</span><br><span class="line"></span><br><span class="line">sudo mount -t cgroup -o none,name=systemd cgroup /sys/fs/cgroup/systemd</span><br></pre></td></tr></table></figure></li><li><p>执行查找命令（可以跳过此步，太慢了）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name &quot;b6803073dc958105e437ebe000efeab37d215c3e054af3fcdbcccc7fdd289a7e&quot;</span><br></pre></td></tr></table></figure><p>最后找到的文件夹：<code>/var/run/docker/runtime-runc/moby/</code></p></li><li><p>打开如下文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/run/docker/runtime-runc/moby/</span><br></pre></td></tr></table></figure></li><li><p>删除响应文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /var/run/docker/runtime-runc/moby/b6803073dc958105e437ebe000efeab37d215c3e054af3fcdbcccc7fdd289a7e</span><br></pre></td></tr></table></figure></li><li><p>重启容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start b6803073dc958105e437ebe000efeab37d215c3e054af3fcdbcccc7fdd289a7e</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;解决群晖Docker无法启动容器OCI-runtime-create-failed-container-with-id-exists报错&quot;&gt;&lt;a href=&quot;#解决群晖Docker无法启动容器OCI-runtime-create-failed-container-with-id-exists报错&quot; class=&quot;headerlink&quot; title=&quot;解决群晖Docker无法启动容器OCI runtime create failed: container with id exists报错&quot;&gt;&lt;/a&gt;解决群晖Docker无法启动容器OCI runtime create failed: container with id exists报错&lt;/h1&gt;&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;硬件：&lt;/strong&gt;黑群晖918+&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DSM：&lt;/strong&gt;DSM 6.2.1-23824 Update 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker：&lt;/strong&gt;18.09.0-0519&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;以最高权限装载第一个Container之后，尝试启动第二个Container的时候显示报错：Start container jellyfin-jellyfin1 failed: {“message”:”OCI runtime create failed: container with id exists: b6803073dc958105e437ebe000efeab37d215c3e054af3fcdbcccc7fdd289a7e: unknown”}.</summary>
    
    
    
    <category term="Docker" scheme="https://dyasher.github.io/categories/Docker/"/>
    
    <category term="id exists" scheme="https://dyasher.github.io/categories/Docker/id-exists/"/>
    
    
    <category term="Docker" scheme="https://dyasher.github.io/tags/Docker/"/>
    
    <category term="群晖" scheme="https://dyasher.github.io/tags/%E7%BE%A4%E6%99%96/"/>
    
  </entry>
  
  <entry>
    <title>Java基础——递归分析</title>
    <link href="https://dyasher.github.io/2021/02/20/Java%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E9%80%92%E5%BD%92%E5%88%86%E6%9E%90/"/>
    <id>https://dyasher.github.io/2021/02/20/Java%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E9%80%92%E5%BD%92%E5%88%86%E6%9E%90/</id>
    <published>2021-02-20T01:47:18.000Z</published>
    <updated>2022-08-25T14:13:38.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h2><ul><li>A方法调用B方法，我们很容易理解</li><li>递归：A方法调用B方法，就是自己调用自己</li></ul><h2 id="递归简介"><a href="#递归简介" class="headerlink" title="递归简介"></a>递归简介</h2><p>利用递归可以使用简单的出现来解决一些复杂的问题，它通常<strong>把一个大型复杂的问题层层转化为一个与原问题相似的规模比较小的问题</strong>，递归策略只需要少量的程序就可以描述处解题过程所需要的重复计算，大大减少了程序代码量，<strong>递归的能力在于用有限的语句来定义对象无限的集合</strong>。<a id="more"></a></p><p>递归结构包括两个部分：</p><ul><li>递归头：什么时候不调用自身的方法。如果没有头，将陷入死循环。头是尽头的意思。</li><li>递归体：什么时候需要调用自身方法</li></ul><h2 id="测试递归"><a href="#测试递归" class="headerlink" title="测试递归"></a>测试递归</h2><h3 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h3><p>这种使用方式是错误的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.asher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemoRecursion</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> TestDemoRecursion().test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：会出现错误，栈溢出的错误。</p><p><img src="https://images.mmzi.online//blog/202208252213506.png" alt="QQ20210220115122"></p><h3 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h3><p><strong>实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemoRecursion</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.print(f(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//阶乘例子</span></span><br><span class="line"><span class="comment">//5！ 5*4*3*2*1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n * f(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>返回结果：</strong></p><p><img src="https://images.mmzi.online//blog/202208252213309.png" alt="QQ20210220122158"></p><p><strong>分析结果：</strong></p><p><img src="https://images.mmzi.online//blog/202208252213076.png" alt="202102201220"></p><p>边界条件：边界值(n==1)</p><p>前阶段：f(n)</p><p>返回阶段：n*(n-1)</p><blockquote><p>缺点：能不用递归则不用递归，基数比较小的时候可以考虑递归用法</p></blockquote><p><img src="https://images.mmzi.online//blog/202208252213897.png" alt="202102201227"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是递归&quot;&gt;&lt;a href=&quot;#什么是递归&quot; class=&quot;headerlink&quot; title=&quot;什么是递归&quot;&gt;&lt;/a&gt;什么是递归&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A方法调用B方法，我们很容易理解&lt;/li&gt;
&lt;li&gt;递归：A方法调用B方法，就是自己调用自己&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;递归简介&quot;&gt;&lt;a href=&quot;#递归简介&quot; class=&quot;headerlink&quot; title=&quot;递归简介&quot;&gt;&lt;/a&gt;递归简介&lt;/h2&gt;&lt;p&gt;利用递归可以使用简单的出现来解决一些复杂的问题，它通常&lt;strong&gt;把一个大型复杂的问题层层转化为一个与原问题相似的规模比较小的问题&lt;/strong&gt;，递归策略只需要少量的程序就可以描述处解题过程所需要的重复计算，大大减少了程序代码量，&lt;strong&gt;递归的能力在于用有限的语句来定义对象无限的集合&lt;/strong&gt;。</summary>
    
    
    
    <category term="Java" scheme="https://dyasher.github.io/categories/Java/"/>
    
    <category term="JavaSE" scheme="https://dyasher.github.io/categories/Java/JavaSE/"/>
    
    
    <category term="Java" scheme="https://dyasher.github.io/tags/Java/"/>
    
    <category term="递归" scheme="https://dyasher.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习——Json交互处理</title>
    <link href="https://dyasher.github.io/2021/02/20/SpringMVC%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Json%E4%BA%A4%E4%BA%92%E5%A4%84%E7%90%86/"/>
    <id>https://dyasher.github.io/2021/02/20/SpringMVC%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Json%E4%BA%A4%E4%BA%92%E5%A4%84%E7%90%86/</id>
    <published>2021-02-20T01:46:47.000Z</published>
    <updated>2022-08-25T14:07:38.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是JSON</h2><ul><li>JSON(JavaScript Object Notation， JS 对象标记) 是一种轻量级的数据交换格式，<strong>目前使用特别广泛</strong>。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，<strong>一切都是对象</strong>。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：<a id="more"></a></p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 <strong>“”</strong> 包裹，使用冒号 <strong>:</strong> 分隔，然后紧接着值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;QinJiang&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;age&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。</p></blockquote><p>其实，可以这么理解：JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;; <span class="comment">//这是一个对象，注意键名也是可以使用引号包裹的</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></span><br></pre></td></tr></table></figure><h3 id="JSON-和-JavaScript-对象互转"><a href="#JSON-和-JavaScript-对象互转" class="headerlink" title="JSON 和 JavaScript 对象互转"></a><strong>JSON 和 JavaScript 对象互转</strong></h3><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><p>1、新建一个module ，springmvc-05-json ， 添加web的支持</p><p>2、在web目录下新建一个 json-1.html ， 编写测试内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSON_Asher<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="comment">//编写一个js的对象</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="javascript">       name:<span class="string">&quot;Asher&quot;</span>,</span></span><br><span class="line">       age:3,</span><br><span class="line"><span class="javascript">       sex:<span class="string">&quot;男&quot;</span></span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="javascript">   <span class="comment">//将js对象转换成json字符串</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(user);</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(str);</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">//将json字符串转换为js对象</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> user2 = <span class="built_in">JSON</span>.parse(str);</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(user2.age,user2.name,user2.sex);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在IDEA中使用浏览器打开，查看控制台输出！</p><p><img src="https://images.mmzi.online//blog/202208252207036.png" alt="QQ截图20210220165027"></p><h3 id="Controller返回JSON数据"><a href="#Controller返回JSON数据" class="headerlink" title="Controller返回JSON数据"></a>Controller返回JSON数据</h3><h4 id="测试Jackson"><a href="#测试Jackson" class="headerlink" title="测试Jackson"></a>测试Jackson</h4><p>Jackson应该是目前比较好的json解析工具了。</p><p>当然工具不止这一个，比如还有阿里巴巴的 <strong>fastjson</strong> 等等。</p><p>我们这里使用Jackson，使用它需要导入它的jar包；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置SpringMVC需要的配置</p><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>springmvc-servlet.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.asher.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写一个实体类<strong>User.java</strong>，编写测试Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要导入lombok</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们需要两个新东西，一个是**@ResponseBody<strong>，配合Controller使用。一个是</strong>ObjectMapper对象**，我们看下具体的用法。</p><p><strong>编写Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/json1&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="string">&quot;小明1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       String str = mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置Tomcat ， 启动测试一下！</p><p><a href="http://localhost:8080/json1">http://localhost:8080/json1</a></p><p><img src="https://images.mmzi.online//blog/202208252207983.png" alt="QQ截图20210220172354"></p><p>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；</p><p>通过@RequestMaping的<strong>produces</strong>属性来实现，修改下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure><p>再次测试， <a href="http://localhost:8080/json1">http://localhost:8080/json1</a> </p><p><img src="https://images.mmzi.online//blog/202208252207606.png" alt="QQ截图20210220172532"></p><blockquote><p>【注意：使用json记得处理乱码问题】</p></blockquote><h5 id="乱码统一解决"><a href="#乱码统一解决" class="headerlink" title="乱码统一解决"></a>乱码统一解决</h5><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="返回json字符串统一解决"><a href="#返回json字符串统一解决" class="headerlink" title="返回json字符串统一解决"></a>返回json字符串统一解决</h5><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加**@ResponseBody** ！我们在前后端分离开发中，一般都使用 <strong>@RestController</strong> ，十分便捷！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/json1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="string">&quot;小明1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       String str = mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@RestController注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试输出集合"><a href="#测试输出集合" class="headerlink" title="测试输出集合"></a>测试输出集合</h5><p>新增一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">   ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">   <span class="comment">//创建一个对象</span></span><br><span class="line">   User user1 = <span class="keyword">new</span> User(<span class="string">&quot;小明1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">   User user2 = <span class="keyword">new</span> User(<span class="string">&quot;小明2号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">   User user3 = <span class="keyword">new</span> User(<span class="string">&quot;小明3号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">   User user4 = <span class="keyword">new</span> User(<span class="string">&quot;小明4号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">   List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">   list.add(user1);</span><br><span class="line">   list.add(user2);</span><br><span class="line">   list.add(user3);</span><br><span class="line">   list.add(user4);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">   String str = mapper.writeValueAsString(list);</span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://images.mmzi.online//blog/202208252207386.png" alt="QQ截图20210220174045"></p><h5 id="输出时间对象"><a href="#输出时间对象" class="headerlink" title="输出时间对象"></a>输出时间对象</h5><p>新增一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">   ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建时间一个对象，java.util.Date</span></span><br><span class="line">   Date date = <span class="keyword">new</span> Date();</span><br><span class="line">   <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">   String str = mapper.writeValueAsString(date);</span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://images.mmzi.online//blog/202208252207643.png" alt="QQ截图20210220173953"></p><ul><li>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！<strong>时间戳</strong></li><li>Jackson 默认是会把时间转成timestamps形式</li></ul><p><strong>解决方案：取消timestamps形式 ， 自定义时间格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json4&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json4</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">   ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//不使用时间戳的方式</span></span><br><span class="line">   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">   <span class="comment">//自定义日期格式对象</span></span><br><span class="line">   SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">   <span class="comment">//指定日期格式</span></span><br><span class="line">   mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">   Date date = <span class="keyword">new</span> Date();</span><br><span class="line">   String str = mapper.writeValueAsString(date);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://images.mmzi.online//blog/202208252207434.png" alt="QQ截图20210220174342"></p><h5 id="抽取为工具类"><a href="#抽取为工具类" class="headerlink" title="抽取为工具类"></a>抽取为工具类</h5><p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下，体验一下这种写法，和很多已经封装好的类是一样的 ，其实是一种思想，当我们浏览源码的时候会发现，这种写法很普遍。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//给定一个默认的的格式，如果不调用就不需要，默认就行，只要传入object</span></span><br><span class="line">       <span class="keyword">return</span> getJson(object,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object,String dateFormat)</span> </span>&#123;</span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       <span class="comment">//不使用时间差的方式</span></span><br><span class="line">       mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">       <span class="comment">//自定义日期格式对象</span></span><br><span class="line">       SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">       <span class="comment">//指定日期格式</span></span><br><span class="line">       mapper.setDateFormat(sdf);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用工具类，代码就更加简洁了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json5&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json5</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">   Date date = <span class="keyword">new</span> Date();</span><br><span class="line">   String json = JsonUtils.getJson(date);</span><br><span class="line">   <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试FastJson"><a href="#测试FastJson" class="headerlink" title="测试FastJson"></a>测试FastJson</h4><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="fastjson-三个主要的类"><a href="#fastjson-三个主要的类" class="headerlink" title="fastjson 三个主要的类"></a>fastjson 三个主要的类</h5><p><strong>JSONObject  代表 json 对象</strong> </p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul><p><strong>JSONArray  代表 json 对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul><p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul><p><strong>代码测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       User user1 = <span class="keyword">new</span> User(<span class="string">&quot;小明1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       User user2 = <span class="keyword">new</span> User(<span class="string">&quot;小明2号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       User user3 = <span class="keyword">new</span> User(<span class="string">&quot;小明3号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       User user4 = <span class="keyword">new</span> User(<span class="string">&quot;小明4号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">       list.add(user1);</span><br><span class="line">       list.add(user2);</span><br><span class="line">       list.add(user3);</span><br><span class="line">       list.add(user4);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);</span><br><span class="line">       String str1 = JSON.toJSONString(list);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);</span><br><span class="line">       String str2 = JSON.toJSONString(user1);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);</span><br><span class="line">       User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);</span><br><span class="line">       JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);</span><br><span class="line">       System.out.println(<span class="string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);</span><br><span class="line">       User to_java_user = JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是JSON&quot;&gt;&lt;a href=&quot;#什么是JSON&quot; class=&quot;headerlink&quot; title=&quot;什么是JSON&quot;&gt;&lt;/a&gt;什么是JSON&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JSON(JavaScript Object Notation， JS 对象标记) 是一种轻量级的数据交换格式，&lt;strong&gt;目前使用特别广泛&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;采用完全独立于编程语言的&lt;strong&gt;文本格式&lt;/strong&gt;来存储和表示数据。&lt;/li&gt;
&lt;li&gt;简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。&lt;/li&gt;
&lt;li&gt;易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 JavaScript 语言中，&lt;strong&gt;一切都是对象&lt;/strong&gt;。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</summary>
    
    
    
    <category term="SpringMVC" scheme="https://dyasher.github.io/categories/SpringMVC/"/>
    
    <category term="SSM框架学习" scheme="https://dyasher.github.io/categories/SpringMVC/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://dyasher.github.io/tags/Spring/"/>
    
    <category term="SpringMVC" scheme="https://dyasher.github.io/tags/SpringMVC/"/>
    
    <category term="JSON" scheme="https://dyasher.github.io/tags/JSON/"/>
    
    <category term="数据交互" scheme="https://dyasher.github.io/tags/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习——数据处理以及跳转</title>
    <link href="https://dyasher.github.io/2021/02/20/SpringMVC%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%BB%A5%E5%8F%8A%E8%B7%B3%E8%BD%AC/"/>
    <id>https://dyasher.github.io/2021/02/20/SpringMVC%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%BB%A5%E5%8F%8A%E8%B7%B3%E8%BD%AC/</id>
    <published>2021-02-20T01:46:07.000Z</published>
    <updated>2022-08-25T14:08:06.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结果跳转方法"><a href="#结果跳转方法" class="headerlink" title="结果跳转方法"></a>结果跳转方法</h1><h2 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h2><p>设置ModelAndView对象 ，根据view的名称 ，和<strong>视图解析器</strong>跳到指定的页面。</p><p><strong>页面：</strong>{视图解析器前缀} + viewName +{视图解析器后缀}<a id="more"></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对应的controller类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest，HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h2><p>通过设置ServletAPI ，不需要视图解析器。</p><p>1、通过HttpServletResponse进行输出</p><p>2、通过HttpServletResponse实现重定向</p><p>3、通过HttpServletResponse实现转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(HttpServletRequest req，HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//没有视图解析器要把把路径写明白</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(HttpServletRequest req，HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(HttpServletRequest req，HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h3 id="无需视图解析器"><a href="#无需视图解析器" class="headerlink" title="无需视图解析器"></a>无需视图解析器</h3><p><strong>通过SpringMVC来实现转发和重定向 。</strong></p><blockquote><p>测试前，需要将视图解析器注释掉</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发二</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t3&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有视图解析器"><a href="#有视图解析器" class="headerlink" title="有视图解析器"></a>有视图解析器</h3><p><strong>通过SpringMVC来实现转发和重定向</strong></p><p>重定向，不需要视图解析器，<strong>本质就是重新请求一个新地方嘛</strong> ，所以注意路径问题。SpringMVC的默认是<strong>转发</strong>。</p><p>可以重定向到另外一个请求实现 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC2</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">       <span class="comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><h2 id="处理提交数据"><a href="#处理提交数据" class="headerlink" title="处理提交数据"></a>处理提交数据</h2><h3 id="1、提交的域名称和处理方法的参数名一致"><a href="#1、提交的域名称和处理方法的参数名一致" class="headerlink" title="1、提交的域名称和处理方法的参数名一致"></a>1、提交的域名称和处理方法的参数名一致</h3><p>提交数据： <a href="http://localhost:8080/hello?name=asher">http://localhost:8080/hello?name=asher</a></p><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台输出：asher</p><h3 id="2、提交的域名称和处理方法的参数名不一致"><a href="#2、提交的域名称和处理方法的参数名不一致" class="headerlink" title="2、提交的域名称和处理方法的参数名不一致"></a>2、提交的域名称和处理方法的参数名不一致</h3><p>提交数据： <a href="http://localhost:8080/hello?username=asher">http://localhost:8080/hello?username=asher</a></p><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台输出：asher</p><h3 id="3、提交的是一个对象"><a href="#3、提交的是一个对象" class="headerlink" title="3、提交的是一个对象"></a>3、提交的是一个对象</h3><p>要求提交的表单域和对象的属性名一致 ， 参数使用对象即可.</p><p>1、实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   <span class="comment">//构造</span></span><br><span class="line">   <span class="comment">//get/set</span></span><br><span class="line">   <span class="comment">//tostring()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、提交数据： <a href="http://localhost:8080/mvc04/user?name=asher&amp;id=1&amp;age=15">http://localhost:8080/mvc04/user?name=asher&amp;id=1&amp;age=15</a></p><p>3、处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台输出：User { id=1, name=’asher’, age=15 }</p><p><strong>说明：</strong>如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</p><h2 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h2><h3 id="第一种-通过ModelAndView"><a href="#第一种-通过ModelAndView" class="headerlink" title="第一种 : 通过ModelAndView"></a>第一种 : 通过ModelAndView</h3><p>前面一直使用的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种-通过ModelMap"><a href="#第二种-通过ModelMap" class="headerlink" title="第二种 : 通过ModelMap"></a>第二种 : 通过ModelMap</h3><p><strong>ModelMap</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap model)</span></span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三种-通过Model"><a href="#第三种-通过Model" class="headerlink" title="第三种 : 通过Model"></a>第三种 : 通过Model</h3><p><strong>Model</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ct2/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span></span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>对于新手而言，简单理解使用区别如下：</p><ul><li><p>Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</p></li><li><p>ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</p></li><li><p>ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</p></li></ul><h1 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h1><p>测试步骤：</p><p>1、我们可以在首页编写一个提交的表单</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/e/t&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>2、后台编写对应的处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Encoding</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/e/t&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model,String name)</span></span>&#123;</span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>,name); <span class="comment">//获取表单提交的值</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>; <span class="comment">//跳转到test页面显示输入的值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、输入中文测试，发现乱码</p><p><img src="https://images.mmzi.online//blog/202208252207376.png" alt="QQ截图20210220163945"></p><blockquote><p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p></blockquote><p>以前乱码问题通过过滤器解决， 而SpringMVC给我们提供了一个过滤器， 可以在web.xml中配置 .</p><p>修改了xml文件需要重启服务器！（配置环境也是很重要的，有可能是因为环境问题导致，乱码问题一定要先排除环境问题）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images.mmzi.online//blog/202208252207330.png" alt="QQ截图20210220164223"></p><blockquote><p>但是我们发现，有些极端情况下，这个过滤器对get的支持不好 。这里先排除环境问题</p></blockquote><p>处理方法：</p><p>1、修改tomcat配置文件：设置编码！’utf-8’</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2、使用自定义过滤器（源码来自网上大神）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 解决get和post请求 全部乱码的过滤器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">       <span class="comment">//处理response的字符编码</span></span><br><span class="line">       HttpServletResponse myResponse=(HttpServletResponse) response;</span><br><span class="line">       myResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">       HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">       <span class="comment">// 对request包装增强</span></span><br><span class="line">       HttpServletRequest myrequest = <span class="keyword">new</span> MyRequest(httpServletRequest);</span><br><span class="line">       chain.doFilter(myrequest, response);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义request对象，HttpServletRequest的包装类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">   <span class="comment">//是否编码的标记</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> hasEncode;</span><br><span class="line">   <span class="comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">       <span class="keyword">this</span>.request = request;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">getParameterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 先获得请求方式</span></span><br><span class="line">       String method = request.getMethod();</span><br><span class="line">       <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;post&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// post请求</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 处理post乱码</span></span><br><span class="line">               request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// get请求</span></span><br><span class="line">           Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">           <span class="keyword">if</span> (!hasEncode) &#123; <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">               <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                   String[] values = parameterMap.get(parameterName);</span><br><span class="line">                   <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               <span class="comment">// 处理get乱码</span></span><br><span class="line">                               values[i] = <span class="keyword">new</span> String(values[i]</span><br><span class="line">                                      .getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                               e.printStackTrace();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">               hasEncode = <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">           <span class="keyword">return</span> parameterMap;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.getParameterMap();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取一个值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取所有值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">return</span> values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一般情况下，SpringMVC的默认乱码处理已经够用了</p></blockquote><p>然后在web.xml中配置这个过滤器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.asher.filter.GenericEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>配置filter的时候<code>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</code></li><li>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8。</li><li>调试时候要及时清理缓存，乱码问题修复后有可能因为缓存问题导致不能正常显示。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;结果跳转方法&quot;&gt;&lt;a href=&quot;#结果跳转方法&quot; class=&quot;headerlink&quot; title=&quot;结果跳转方法&quot;&gt;&lt;/a&gt;结果跳转方法&lt;/h1&gt;&lt;h2 id=&quot;ModelAndView&quot;&gt;&lt;a href=&quot;#ModelAndView&quot; class=&quot;headerlink&quot; title=&quot;ModelAndView&quot;&gt;&lt;/a&gt;ModelAndView&lt;/h2&gt;&lt;p&gt;设置ModelAndView对象 ，根据view的名称 ，和&lt;strong&gt;视图解析器&lt;/strong&gt;跳到指定的页面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;页面：&lt;/strong&gt;{视图解析器前缀} + viewName +{视图解析器后缀}</summary>
    
    
    
    <category term="SpringMVC" scheme="https://dyasher.github.io/categories/SpringMVC/"/>
    
    <category term="SSM框架学习" scheme="https://dyasher.github.io/categories/SpringMVC/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://dyasher.github.io/tags/Spring/"/>
    
    <category term="SpringMVC" scheme="https://dyasher.github.io/tags/SpringMVC/"/>
    
    <category term="页面跳转" scheme="https://dyasher.github.io/tags/%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/"/>
    
    <category term="数据处理" scheme="https://dyasher.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习——RestFul风格和控制器、ResquestMapping</title>
    <link href="https://dyasher.github.io/2021/02/19/SpringMVC%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94RestFul%E9%A3%8E%E6%A0%BC%E5%92%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E3%80%81ResquestMapping/"/>
    <id>https://dyasher.github.io/2021/02/19/SpringMVC%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94RestFul%E9%A3%8E%E6%A0%BC%E5%92%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E3%80%81ResquestMapping/</id>
    <published>2021-02-19T15:50:19.000Z</published>
    <updated>2022-08-25T14:07:03.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="控制器Controller"><a href="#控制器Controller" class="headerlink" title="控制器Controller"></a>控制器Controller</h1><h2 id="什么是控制器Controller"><a href="#什么是控制器Controller" class="headerlink" title="什么是控制器Controller"></a>什么是控制器Controller</h2><ul><li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li><li>控制器负责解析用户的请求并将其转换为一个模型。</li><li>在Spring MVC中一个控制器类可以包含多个方法</li><li>在Spring MVC中，对于Controller的配置方式有很多种<a id="more"></a></li></ul><h2 id="实现Controler接口"><a href="#实现Controler接口" class="headerlink" title="实现Controler接口"></a>实现Controler接口</h2><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现该接口的类获得控制器功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">   <span class="comment">//处理请求且返回一个模型与视图对象</span></span><br><span class="line">   <span class="function">ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h3><ol><li><p>新建一个Moudle，springmvc-04-controller 。将刚才的03 拷贝一份, 我们进行操作，要用配置方式非注解测试！</p></li><li><ul><li>删掉HelloController</li></ul></li></ol><ul><li><p>mvc的配置文件只留下 视图解析器！（省略映射器和适配器）</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;--&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>编写一个Controller类，ControllerTest1；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义控制器</span></span><br><span class="line"><span class="comment">//注意点：不要导错包，实现Controller接口，重写方法；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Test1Controller&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;/t1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.asher.controller.ControllerTest1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器；</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Kuangshen&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 / ，所以请求不用加项目名，如果打包项目还没添加对应的jar包，先添加，避免404错误。</p><p><img src="https://images.mmzi.online//blog/202208252206661.png" alt="QQ截图20210220155105"></p></li></ol><p><strong>说明：</strong></p><ul><li>实现接口Controller定义控制器是较老的办法。</li><li>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li></ul><h2 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h2><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.asher.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>增加一个ControllerTest2类，使用注解实现；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Controller注解的类会自动添加到Spring上下文中</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;ControllerTest2&quot;</span>);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行Tomcat测试</p><p><img src="https://images.mmzi.online//blog/202208252206180.png" alt="QQ截图20210220160707"></p></li></ul><blockquote><p>注解方式是平时使用的最多的方式!</p></blockquote><p><strong>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p><h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h1><p><strong>@RequestMapping</strong></p><ul><li><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p></li><li><p>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</p></li><li><p>只注解在方法上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/h1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问路径：http://localhost:8080 / 项目名 / h1</span></span><br></pre></td></tr></table></figure></li><li><p>同时注解类与方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/h1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问路径：http://localhost:8080 / 项目名/ admin /h1  , 需要先指定类的路径再指定方法的路径；</span></span><br></pre></td></tr></table></figure><h1 id="RestFul-风格"><a href="#RestFul-风格" class="headerlink" title="RestFul 风格"></a>RestFul 风格</h1></li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>资源：互联网所有的事物都可以被抽象为资源</p><p>资源操作：使用<strong>POST、DELETE、PUT、GET</strong>，使用不同方法对资源进行操作。</p><p>分别对应 <strong>添加、 删除、修改、查询</strong>。</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><h3 id="传统方式操作资源-："><a href="#传统方式操作资源-：" class="headerlink" title="传统方式操作资源  ："></a><strong>传统方式操作资源  ：</strong></h3><p>通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p>​    <a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p><p>​    <a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p><h3 id="使用RESTful操作资源-："><a href="#使用RESTful操作资源-：" class="headerlink" title="使用RESTful操作资源 ："></a><strong>使用RESTful操作资源 ：</strong></h3><p>可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</p><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</p><h2 id="测试RestFul风格"><a href="#测试RestFul风格" class="headerlink" title="测试RestFul风格"></a>测试RestFul风格</h2><ol><li><p>在新建一个类 RestFulController。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Spring MVC中可以使用  @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable</span> <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;       </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><p><img src="https://images.mmzi.online//blog/202208252206957.png" alt="QQ截图20210220161929"></p></li><li><p>思考：使用路径变量的好处？</p><ul><li><p>使路径变得更加简洁；</p></li><li><p>获得参数更加方便，框架会自动进行类型转换。</p></li><li><p>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</p><p><img src="https://images.mmzi.online//blog/202208252206238.png" alt="QQ截图20210220162029"></p></li></ul></li><li><p>我们来修改下对应的参数类型，再次测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//映射访问路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable</span> String p2, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   String result = p1+p2;</span><br><span class="line">   <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">   <span class="comment">//返回视图位置</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.mmzi.online//blog/202208252206786.png" alt="QQ截图20210220162206"></p></li></ol><h2 id="使用method属性指定请求类型"><a href="#使用method属性指定请求类型" class="headerlink" title="使用method属性指定请求类型"></a>使用method属性指定请求类型</h2><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等。</p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><ul><li><p>增加一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</p><p><img src="https://images.mmzi.online//blog/202208252206678.png" alt="QQ截图20210220162600"></p></li><li><p>如果将POST修改为GET则正常了；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是Get请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.mmzi.online//blog/202208252206262.png" alt="QQ截图20210220162719"></p></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p><blockquote><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p></blockquote><p>方法级别的注解变体有如下几个：组合注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></figure><p>@GetMapping 是一个组合注解，平时使用的会比较多！</p><p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="小黄鸭调试方法"><a href="#小黄鸭调试方法" class="headerlink" title="小黄鸭调试方法"></a>小黄鸭调试方法</h2><p><strong>场景一：</strong></p><p><em>我们都有过向别人（甚至可能向完全不会编程的人）提问及解释编程问题的经历，但是很多时候就在我们解释的过程中自己却想到了问题的解决方案，然后对方却一脸茫然。</em></p><p><strong>场景二：</strong></p><p>你的同行跑来问你一个问题，但是当他自己把问题说完，或说到一半的时候就想出答案走了，留下一脸茫然的你。</p><p>其实上面两种场景现象就是所谓的小黄鸭调试法（Rubber Duck Debuging），又称橡皮鸭调试法，它是我们软件工程中最常使用调试方法之一。</p><p><strong>来源：</strong></p><p>此概念据说来自《程序员修炼之道》书中的一个故事，传说程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码，然后很快就将问题定位修复了。</p><p><strong>小结：</strong></p><p>这是一种思想，当我们遇到编码问题时候，可以先把所有编程窗口关闭，然后重新理一遍思路，按编写的程序步骤一步一步打开窗口，然后每个地方按顺序检查，心里默默念着，对自己多说几遍，很快就能发现问题所在，这是我们开发中出现问题最常用的解决方法。和场景一二的方法大同小异。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;控制器Controller&quot;&gt;&lt;a href=&quot;#控制器Controller&quot; class=&quot;headerlink&quot; title=&quot;控制器Controller&quot;&gt;&lt;/a&gt;控制器Controller&lt;/h1&gt;&lt;h2 id=&quot;什么是控制器Controller&quot;&gt;&lt;a href=&quot;#什么是控制器Controller&quot; class=&quot;headerlink&quot; title=&quot;什么是控制器Controller&quot;&gt;&lt;/a&gt;什么是控制器Controller&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。&lt;/li&gt;
&lt;li&gt;控制器负责解析用户的请求并将其转换为一个模型。&lt;/li&gt;
&lt;li&gt;在Spring MVC中一个控制器类可以包含多个方法&lt;/li&gt;
&lt;li&gt;在Spring MVC中，对于Controller的配置方式有很多种</summary>
    
    
    
    <category term="SpringMVC" scheme="https://dyasher.github.io/categories/SpringMVC/"/>
    
    <category term="SSM框架学习" scheme="https://dyasher.github.io/categories/SpringMVC/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://dyasher.github.io/tags/Spring/"/>
    
    <category term="RestFul风格" scheme="https://dyasher.github.io/tags/RestFul%E9%A3%8E%E6%A0%BC/"/>
    
    <category term="控制器Controller" scheme="https://dyasher.github.io/tags/%E6%8E%A7%E5%88%B6%E5%99%A8Controller/"/>
    
    <category term="RequestMapping" scheme="https://dyasher.github.io/tags/RequestMapping/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习——SpringMVC初步了解</title>
    <link href="https://dyasher.github.io/2021/02/19/SpringMVC%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94SpringMVC%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/"/>
    <id>https://dyasher.github.io/2021/02/19/SpringMVC%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94SpringMVC%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/</id>
    <published>2021-02-19T14:12:06.000Z</published>
    <updated>2022-08-25T14:05:54.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC基础入门"><a href="#SpringMVC基础入门" class="headerlink" title="SpringMVC基础入门"></a>SpringMVC基础入门</h1><h2 id="配置版"><a href="#配置版" class="headerlink" title="配置版"></a>配置版</h2><p>1、新建一个Moudle ， springmvc-01-hello ， 添加web的支持！</p><p>2、确定导入了SpringMVC 的依赖！<a id="more"></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、配置web.xml  ， 注册DispatcherServlet；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、编写SpringMVC的配置文件，名称：springmvc-servlet.xml；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、添加处理映射器；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>6、添加处理适配器；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>7、添加视图解析器；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>8、编写我们要操作业务Controller，要么实现Controller接口，要么增加注解，需要返回一个ModelAndView，封装数据，封装视图；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.asher.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>9、将自己的类交给SpringIOC容器，注册bean；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>10、写要跳转的jsp页面，显示ModelAndView存放的数据，以及我们正常的页面；</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Asher&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        $&#123;msg&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>11、配置Tomcat，启动测试</p><p><img src="https://images.mmzi.online//blog/202208252205705.png" alt="QQ20210219223701"></p><blockquote><p>可能遇到的问题，出现访问404，排查步骤：</p></blockquote><ol><li>查看控制台输出，看一下是不是缺少了什么jar包。</li><li>如果jar包存在，显示无法输出，<strong>就在IDEA的项目发布中，添加lib依赖</strong>！</li><li>重启Tomcat 即可解决！</li></ol><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>在这个过程中，我们仅仅是理解在SpringMVC中的入门知识，通过代码去理解其中的原理，实际开发中是不可能这样做的，在实际开发中， 我们使用的是注解版的开发，能简化大部分SpringMVC的配置版的步骤和优化代码。</p><h2 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h2><p><strong>1、新建一个Moudle，springmvc-02-hello-annotation 。添加web支持！</strong></p><p>2、由于Maven可能存在资源过滤的问题，我们将配置完善</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、配置web.xml</p><p>注意点：就做两步这两步都是写死的，第一步注册springMVC的servlet（DispatchServlet），关联配置文件springmvc-servlet.xml；第二步拦截请求；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>/ 和 /* 的区别：</strong></p><p>&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。</p><p>&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图时再次进入spring的DispatcherServlet 类，会再次拼接，导致找不到对应的controller所以报404错。</p><p>配置文件的注意点：</p><ul><li>注意web.xml版本问题，要最新版！</li><li>注册DispatcherServlet</li><li>关联SpringMVC的配置文件</li><li>启动级别为1</li><li>映射路径为 / 【不要用/*，会404】</li></ul><p><strong>5、添加SpringMVC的配置文件</strong></p><p>在resource目录下添加<strong>springmvc-servlet.xml</strong>配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.asher.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   支持mvc注解驱动</span></span><br><span class="line"><span class="comment">       在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">       要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">       必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">       和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">       这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">       而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简化配置信息：1、自动扫描注解，2、不处理静态资源，3、支持mvc注解驱动，4、配置视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.asher.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、创建Controller</p><p>编写一个Java控制类com.asher.controller.HelloController , 注意编码规范</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,SpringMVC&quot;</span>);</span><br><span class="line">        <span class="comment">//web-inf/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp。</li></ul><p><strong>7、创建视图层</strong></p><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p><p>可以通过EL表示取出Model中存放的值，或者对象；</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        $&#123;msg&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>8、配置Tomcat运行</p><p>配置Tomcat ，  开启服务器 ， 访问 对应的请求路径！</p><p><img src="https://images.mmzi.online//blog/202208252205363.png" alt="QQ20210219233450"></p><h3 id="小结：-1"><a href="#小结：-1" class="headerlink" title="小结："></a>小结：</h3><p>实现步骤非常简单：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用SpringMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置。</p><blockquote><p>回顾原理图可以更加清晰理解SpringMVC的运行机制</p></blockquote><p><img src="https://images.mmzi.online//blog/202208252205388.png" alt="SpringMVC执行原理流程图"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SpringMVC基础入门&quot;&gt;&lt;a href=&quot;#SpringMVC基础入门&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC基础入门&quot;&gt;&lt;/a&gt;SpringMVC基础入门&lt;/h1&gt;&lt;h2 id=&quot;配置版&quot;&gt;&lt;a href=&quot;#配置版&quot; class=&quot;headerlink&quot; title=&quot;配置版&quot;&gt;&lt;/a&gt;配置版&lt;/h2&gt;&lt;p&gt;1、新建一个Moudle ， springmvc-01-hello ， 添加web的支持！&lt;/p&gt;
&lt;p&gt;2、确定导入了SpringMVC 的依赖！</summary>
    
    
    
    <category term="SpringMVC" scheme="https://dyasher.github.io/categories/SpringMVC/"/>
    
    <category term="SSM框架学习" scheme="https://dyasher.github.io/categories/SpringMVC/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://dyasher.github.io/tags/Spring/"/>
    
    <category term="MVC" scheme="https://dyasher.github.io/tags/MVC/"/>
    
    <category term="SpringMVC基础" scheme="https://dyasher.github.io/tags/SpringMVC%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习——SpringMVC入门</title>
    <link href="https://dyasher.github.io/2021/02/18/SpringMVC%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94SpringMVC%E5%85%A5%E9%97%A8/"/>
    <id>https://dyasher.github.io/2021/02/18/SpringMVC%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94SpringMVC%E5%85%A5%E9%97%A8/</id>
    <published>2021-02-18T11:13:22.000Z</published>
    <updated>2022-08-25T14:05:25.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、回顾MVC"><a href="#1、回顾MVC" class="headerlink" title="1、回顾MVC"></a>1、回顾MVC</h2><h3 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h3><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。<a id="more"></a></li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p><img src="https://images.mmzi.online//blog/202208252203441.jpeg" alt="A84EB031438FAEC77E42CB07E72001EA"></p><h3 id="1-2、Model1时代"><a href="#1-2、Model1时代" class="headerlink" title="1.2、Model1时代"></a>1.2、Model1时代</h3><ul><li>在web早期的开发中，通常采用的都是Model1。</li><li>Model1中，主要分为两层，视图层和模型层。</li></ul><p><img src="https://images.mmzi.online//blog/202208252204734.png" alt="640-1"></p><h3 id="1-3、Model2时代"><a href="#1-3、Model2时代" class="headerlink" title="1.3、Model2时代"></a>1.3、Model2时代</h3><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p><p><img src="https://images.mmzi.online//blog/202208252204938.png" alt="640"></p><ol><li>用户发请求</li><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给servlet</li><li>servlet转向到JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p><strong>职责分析：</strong></p><p><strong>Controller：控制器</strong></p><ol><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ol><p><strong>Model：模型</strong></p><ol><li>业务逻辑</li><li>保存数据的状态</li></ol><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p><h3 id="1-4、回顾Servlet"><a href="#1-4、回顾Servlet" class="headerlink" title="1.4、回顾Servlet"></a>1.4、回顾Servlet</h3><ol><li><p>新建一个Maven工程当做父工程！pom依赖！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p></li><li><p>导入servlet 和 jsp 的 jar 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个Servlet类，用来处理用户的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现Servlet接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> throwsServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//取得参数</span></span><br><span class="line">       String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了add方法&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>))&#123;</span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了delete方法&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//业务逻辑</span></span><br><span class="line">       <span class="comment">//视图跳转</span></span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> throwsServletException, IOException </span>&#123;</span><br><span class="line">       doGet(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在web.xml中注册Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置Tomcat，并启动测试</p></li><li><ul><li>localhost:8080/user?method=add</li><li>localhost:8080/user?method=delete</li></ul></li></ol><p><strong>MVC框架要做哪些事情</strong></p><ol><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li></ol><p><strong>说明：</strong></p><p>​    常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….</p><h2 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h2><h3 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h3><p><img src="https://images.mmzi.online//blog/202208252205624.png" alt="640-10"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p><strong>我们为什么要学习SpringMVC呢?</strong></p><p> Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p><p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong> </p><h3 id="2-2、中心控制器"><a href="#2-2、中心控制器" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h3><p>​    Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>​    Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p><p><img src="https://images.mmzi.online//blog/202208252205112.png" alt="640-11"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p><strong>我们为什么要学习SpringMVC呢?</strong></p><p> Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p><p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong> </p><h3 id="2-2、中心控制器-1"><a href="#2-2、中心控制器-1" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h3><p>​    Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>​    Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p><p><img src="https://images.mmzi.online//blog/202208252205437.png" alt="官方翻译图"></p><h3 id="2-3、SpringMVC执行原理"><a href="#2-3、SpringMVC执行原理" class="headerlink" title="2.3、SpringMVC执行原理"></a>2.3、SpringMVC执行原理</h3><p><img src="https://images.mmzi.online//blog/202208252205225.png" alt="SpringMVC执行原理流程图"></p><blockquote><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p></blockquote><p><strong>简要分析执行流程</strong></p><ol><li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p><p><strong>如上url拆分成三部分：</strong></p><p><a href="http://localhost:8080服务器域名">http://localhost:8080服务器域名</a></p><p>SpringMVC部署在服务器上的web站点</p><p>hello表示控制器</p><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p></li><li><p>HandlerMapping为处理器映射。由DispatcherServlet调用HandlerMapping，HandlerMapping根据请求url查找Handler。（DispatcherServlet——&gt;HandlerMapping）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HandlerExecution表示具体的Handler，其主要作用是根据url查找控制器，如上url被查找控制器为：hello。（HandlerMapping——&gt;HandlerExecution）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.asher.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HandlerExecution将解析后的信息传递给DispatcherServlet，如解析控制器映射等。（HandlerExecution——&gt;DispatcherServlet）</p></li><li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。（DispatcherServlet——&gt;HandlerAdapter）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Handler让具体的Controller执行，跳转到具体的Controller实现类中。（HandlerAdapter——&gt;Controller）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>Controller将具体的执行信息返回给HandlerAdapter，如ModelAndView。（Controller——&gt;HandlerAdapter）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line"> mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line"><span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line"> mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br></pre></td></tr></table></figure></li><li><p>HandlerAdapter将视图逻辑名或模型（ModelAndView）传递给DispatcherServlet。（HandlerAdapter——&gt;DispatcherServlet）</p></li><li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。（DispatcherServlet——&gt;ViewResolver）</p></li><li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。（ViewResolver——&gt; DispatcherServlet）</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView</span></span><br><span class="line"><span class="comment">   1. 获取ModelAndView的数据</span></span><br><span class="line"><span class="comment">   2. 解析ModelAndView的视图名字</span></span><br><span class="line"><span class="comment">   3. 拼接视图名字，找到相应的视图 /WEB-INF/jsp/hello.jsp</span></span><br><span class="line"><span class="comment">   4. 将数据渲染到这个视图中</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>最终视图呈现给用户。（DispatcherServlet——&gt;View）</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、回顾MVC&quot;&gt;&lt;a href=&quot;#1、回顾MVC&quot; class=&quot;headerlink&quot; title=&quot;1、回顾MVC&quot;&gt;&lt;/a&gt;1、回顾MVC&lt;/h2&gt;&lt;h3 id=&quot;1-1、什么是MVC&quot;&gt;&lt;a href=&quot;#1-1、什么是MVC&quot; class=&quot;headerlink&quot; title=&quot;1.1、什么是MVC&quot;&gt;&lt;/a&gt;1.1、什么是MVC&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。&lt;/li&gt;
&lt;li&gt;是将业务逻辑、数据、显示分离的方法来组织代码。&lt;/li&gt;
&lt;li&gt;MVC主要作用是&lt;strong&gt;降低了视图与业务逻辑间的双向偶合&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;MVC不是一种设计模式，&lt;strong&gt;MVC是一种架构模式&lt;/strong&gt;。当然不同的MVC存在差异。</summary>
    
    
    
    <category term="SpringMVC" scheme="https://dyasher.github.io/categories/SpringMVC/"/>
    
    <category term="SSM框架学习" scheme="https://dyasher.github.io/categories/SpringMVC/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://dyasher.github.io/tags/Spring/"/>
    
    <category term="SpringMVC" scheme="https://dyasher.github.io/tags/SpringMVC/"/>
    
    <category term="MVC" scheme="https://dyasher.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习——SpringMVC入门</title>
    <link href="https://dyasher.github.io/2021/02/18/SpringMVC%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94SpringMVC%E5%85%A5%E9%97%A8_AsherdeiMac.local_Apr-22-100934-2021_Conflict/"/>
    <id>https://dyasher.github.io/2021/02/18/SpringMVC%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94SpringMVC%E5%85%A5%E9%97%A8_AsherdeiMac.local_Apr-22-100934-2021_Conflict/</id>
    <published>2021-02-18T11:13:22.000Z</published>
    <updated>2022-08-25T14:02:18.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、回顾MVC"><a href="#1、回顾MVC" class="headerlink" title="1、回顾MVC"></a>1、回顾MVC</h2><h3 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h3><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。<a id="more"></a></li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p><img src="https://images.mmzi.online//blog/202208252200888.jpeg" alt="A84EB031438FAEC77E42CB07E72001EA"></p><h3 id="1-2、Model1时代"><a href="#1-2、Model1时代" class="headerlink" title="1.2、Model1时代"></a>1.2、Model1时代</h3><ul><li>在web早期的开发中，通常采用的都是Model1。</li><li>Model1中，主要分为两层，视图层和模型层。</li></ul><p><img src="https://images.mmzi.online//blog/202208252201653.png" alt="640-1"></p><h3 id="1-3、Model2时代"><a href="#1-3、Model2时代" class="headerlink" title="1.3、Model2时代"></a>1.3、Model2时代</h3><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p><p><img src="https://images.mmzi.online//blog/202208252201756.png" alt="640"></p><ol><li>用户发请求</li><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给servlet</li><li>servlet转向到JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p><strong>职责分析：</strong></p><p><strong>Controller：控制器</strong></p><ol><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ol><p><strong>Model：模型</strong></p><ol><li>业务逻辑</li><li>保存数据的状态</li></ol><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p><h3 id="1-4、回顾Servlet"><a href="#1-4、回顾Servlet" class="headerlink" title="1.4、回顾Servlet"></a>1.4、回顾Servlet</h3><ol><li><p>新建一个Maven工程当做父工程！pom依赖！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p></li><li><p>导入servlet 和 jsp 的 jar 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个Servlet类，用来处理用户的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现Servlet接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> throwsServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//取得参数</span></span><br><span class="line">       String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了add方法&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>))&#123;</span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了delete方法&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//业务逻辑</span></span><br><span class="line">       <span class="comment">//视图跳转</span></span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> throwsServletException, IOException </span>&#123;</span><br><span class="line">       doGet(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在web.xml中注册Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置Tomcat，并启动测试</p></li><li><ul><li>localhost:8080/user?method=add</li><li>localhost:8080/user?method=delete</li></ul></li></ol><p><strong>MVC框架要做哪些事情</strong></p><ol><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li></ol><p><strong>说明：</strong></p><p>​    常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….</p><h2 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h2><h3 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h3><p><img src="https://images.mmzi.online//blog/202208252201036.png" alt="640-10"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p><strong>我们为什么要学习SpringMVC呢?</strong></p><p> Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p><p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong> </p><h3 id="2-2、中心控制器"><a href="#2-2、中心控制器" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h3><p>​    Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>​    Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p><p><img src="https://images.mmzi.online//blog/202208252201100.png" alt="640-11"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p><strong>我们为什么要学习SpringMVC呢?</strong></p><p> Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p><p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong> </p><h3 id="2-2、中心控制器-1"><a href="#2-2、中心控制器-1" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h3><p>​    Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>​    Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p><p><img src="https://images.mmzi.online//blog/202208252202860.png" alt="640-13"></p><h3 id="2-3、SpringMVC执行原理"><a href="#2-3、SpringMVC执行原理" class="headerlink" title="2.3、SpringMVC执行原理"></a>2.3、SpringMVC执行原理</h3><p><img src="https://images.mmzi.online//blog/202208252202226.png" alt="640"></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p><strong>简要分析执行流程</strong></p><ol><li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p><p><strong>如上url拆分成三部分：</strong></p><p><a href="http://localhost:8080服务器域名">http://localhost:8080服务器域名</a></p><p>SpringMVC部署在服务器上的web站点</p><p>hello表示控制器</p><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p></li><li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p></li><li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p></li><li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p></li><li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p></li><li><p>Handler让具体的Controller执行。</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p></li><li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p></li><li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p></li><li><p>最终视图呈现给用户。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、回顾MVC&quot;&gt;&lt;a href=&quot;#1、回顾MVC&quot; class=&quot;headerlink&quot; title=&quot;1、回顾MVC&quot;&gt;&lt;/a&gt;1、回顾MVC&lt;/h2&gt;&lt;h3 id=&quot;1-1、什么是MVC&quot;&gt;&lt;a href=&quot;#1-1、什么是MVC&quot; class=&quot;headerlink&quot; title=&quot;1.1、什么是MVC&quot;&gt;&lt;/a&gt;1.1、什么是MVC&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。&lt;/li&gt;
&lt;li&gt;是将业务逻辑、数据、显示分离的方法来组织代码。&lt;/li&gt;
&lt;li&gt;MVC主要作用是&lt;strong&gt;降低了视图与业务逻辑间的双向偶合&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;MVC不是一种设计模式，&lt;strong&gt;MVC是一种架构模式&lt;/strong&gt;。当然不同的MVC存在差异。</summary>
    
    
    
    <category term="Spring" scheme="https://dyasher.github.io/categories/Spring/"/>
    
    <category term="SSM框架学习" scheme="https://dyasher.github.io/categories/Spring/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://dyasher.github.io/tags/Spring/"/>
    
    <category term="SpringMVC" scheme="https://dyasher.github.io/tags/SpringMVC/"/>
    
    <category term="MVC" scheme="https://dyasher.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习——AOP学习</title>
    <link href="https://dyasher.github.io/2021/02/18/Spring%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94AOP%E5%AD%A6%E4%B9%A0/"/>
    <id>https://dyasher.github.io/2021/02/18/Spring%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94AOP%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-18T10:08:03.000Z</published>
    <updated>2022-08-25T14:08:30.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h2><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。<a id="more"></a></p><p><img src="https://images.mmzi.online//blog/202208252208049.png" alt="image-20210218180858086"></p><h2 id="Aop在Spring中的作用"><a href="#Aop在Spring中的作用" class="headerlink" title="Aop在Spring中的作用"></a>Aop在Spring中的作用</h2><ul><li>提供声明式事务；</li><li>允许用户自定义切面；</li></ul><p><strong>以下名词需要了解下：</strong></p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li><li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</li><li>目标（Target）：被通知对象。</li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义。</li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><p><img src="https://images.mmzi.online//blog/202208252208292.png" alt="image-20210218181200970"></p><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><p><img src="https://images.mmzi.online//blog/202208252208520.png" alt="image-20210218181227428"></p><h2 id="使用Spring实现AOP"><a href="#使用Spring实现AOP" class="headerlink" title="使用Spring实现AOP"></a>使用Spring实现AOP</h2><blockquote><p>使用AOP织入，需要导入一个依赖包！</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p><strong>通过 Spring API 实现</strong><br>第一步：编写我们的业务接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;增加用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;删除用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;更新用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;查询用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：然后去写我们的增强类 , 我们编写两个 , 一个前置增强 一个后置增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//method : 要执行的目标对象的方法</span></span><br><span class="line">   <span class="comment">//objects : 被调用的方法的参数</span></span><br><span class="line">   <span class="comment">//Object : 目标对象</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       System.out.println( o.getClass().getName() + <span class="string">&quot;的&quot;</span> + method.getName() + <span class="string">&quot;方法被执行了&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">   <span class="comment">//returnValue 返回值</span></span><br><span class="line">   <span class="comment">//method被调用的方法</span></span><br><span class="line">   <span class="comment">//args 被调用的方法的对象的参数</span></span><br><span class="line">   <span class="comment">//target 被调用的目标对象</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;执行了&quot;</span> + target.getClass().getName()</span><br><span class="line">       +<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;方法,&quot;</span></span><br><span class="line">       +<span class="string">&quot;返回值：&quot;</span>+returnValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：最后去spring的文件中注册 , 并实现aop切入实现 , 注意导入约束 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.log.Log&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--切入点 expression:表达式匹配要执行的方法--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第四步：测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">       UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">       userService.search();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Aop的重要性 : 很重要 , 一定要理解其中的思路 , 主要是思想的理解这一块。<br>Spring的Aop就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 , 当执行领域业务时 , 将会把公共业务加进来。 实现公共业务的重复利用。领域业务更纯粹 , 程序猿专注领域业务 , 其本质还是动态代理。 </p></blockquote><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p><strong>自定义类来实现Aop</strong></p><p>目标业务类不变依旧是userServiceImpl<br>第一步 ：写我们自己的一个切入类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointcut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：去spring中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种方式自定义实现--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.config.DiyPointcut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--第二种方式：使用AOP的标签实现--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三步：测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">       UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">       userService.add();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h3><p>使用注解实现<br>第一步：编写一个注解实现的增强类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointcut</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Before(&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@After(&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Around(&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;签名:&quot;</span>+jp.getSignature());</span><br><span class="line">       <span class="comment">//执行目标方法proceed</span></span><br><span class="line"></span><br><span class="line">       Object proceed = jp.proceed();</span><br><span class="line">       System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">       System.out.println(proceed);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：在Spring配置文件中，注册bean，并增加支持注解的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三种方式:注解实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointcut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.config.AnnotationPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>aop:aspectj-autoproxy：说明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过aop命名空间的<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span>声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span>隐藏起来了</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span>有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>  <span class="attr">poxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。</span><br></pre></td></tr></table></figure><h3 id="切面表达式的写法"><a href="#切面表达式的写法" class="headerlink" title="切面表达式的写法"></a>切面表达式的写法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br></pre></td></tr></table></figure><ol><li>访问修饰符可以省略</li><li>返回值类型、包名、类名、方法名可以使用星号*  代表任意</li><li>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类</li><li>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表</li></ol><p><strong>例如：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execution(public void com.itheima.aop.Target.method()) </span><br><span class="line">execution(void com.itheima.aop.Target.*(..))</span><br><span class="line">execution(* com.itheima.aop.*.*(..))</span><br><span class="line">execution(* com.itheima.aop..*.*(..))</span><br><span class="line">execution(* *..*.*(..))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是AOP&quot;&gt;&lt;a href=&quot;#什么是AOP&quot; class=&quot;headerlink&quot; title=&quot;什么是AOP&quot;&gt;&lt;/a&gt;什么是AOP&lt;/h2&gt;&lt;p&gt;AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</summary>
    
    
    
    <category term="Spring" scheme="https://dyasher.github.io/categories/Spring/"/>
    
    <category term="SSM框架学习" scheme="https://dyasher.github.io/categories/Spring/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://dyasher.github.io/tags/Spring/"/>
    
    <category term="AOP" scheme="https://dyasher.github.io/tags/AOP/"/>
    
    <category term="面向切面编程" scheme="https://dyasher.github.io/tags/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习——AOP底层原理</title>
    <link href="https://dyasher.github.io/2021/02/18/Spring%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94AOP%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <id>https://dyasher.github.io/2021/02/18/Spring%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94AOP%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</id>
    <published>2021-02-18T09:23:10.000Z</published>
    <updated>2022-08-25T14:09:08.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>为什么要学习代理模式，因为AOP的底层机制就是动态代理！<br>代理模式：</p><ul><li>静态代理</li><li>动态代理</li></ul><p>学习aop之前 , 我们要先了解一下代理模式！<a id="more"></a></p><p><img src="https://images.mmzi.online//blog/202208252208304.png" alt="image-20210218172541617"></p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理角色分析</p><ul><li>抽象角色：一般使用接口或者抽象类来实现。</li><li>真实角色：被代理的角色。</li><li>代理角色：代理真实角色，代理真实角色后，一半都会有一些附属操作。</li><li>客户：使用代理角色来进行一些操作。</li></ul><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>Rnt.java即抽象角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象角色：租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Host . java 即真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//真实角色: 房东，房东要出租房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;房屋出租&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Proxy . java 即代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理角色：中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Host host;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.host = host;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//租房</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>&#123;</span><br><span class="line">       seeHouse();</span><br><span class="line">       host.rent();</span><br><span class="line">       fare();</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//看房</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;带房客看房&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//收中介费</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client . java 即客户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户类，一般客户都会去找代理！</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//房东要租房</span></span><br><span class="line">       Host host = <span class="keyword">new</span> Host();</span><br><span class="line">    </span><br><span class="line">      <span class="comment">//中介帮助房东</span></span><br><span class="line">       Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//你去找中介！</span></span><br><span class="line">       proxy.rent();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong>在这个过程中，你直接接触的就是中介，就如同现实生活中的样子，你看不到房东，但是你依旧租到了房东的房子通过代理，这就是所谓的代理模式，程序源自于生活，所以学编程的人，一般能够更加抽象的看待生活中发生的事情。</p><h3 id="静态代理的好处："><a href="#静态代理的好处：" class="headerlink" title="静态代理的好处："></a>静态代理的好处：</h3><ul><li>可以使得我们的真实角色更加纯粹 ，不再去关注一些公共的事情 。</li><li>公共的业务由代理来完成 . 实现了业务的分工 。</li><li>公共业务发生扩展时变得更加集中和方便 。</li></ul><h3 id="静态代理的缺点："><a href="#静态代理的缺点：" class="headerlink" title="静态代理的缺点："></a>静态代理的缺点：</h3><ul><li>类多了 , 多了代理类 , 工作量变大了</li><li>并发效率降低</li></ul><blockquote><p>我们想要静态代理的好处，又不想要静态代理的缺点，所以 , 就有了动态代理 !</p></blockquote><h3 id="巩固静态代理"><a href="#巩固静态代理" class="headerlink" title="巩固静态代理"></a>巩固静态代理</h3><ol><li><p>创建一个抽象角色，比如咋们平时做的用户业务，抽象起来就是增删改查！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象角色：增删改查业务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们需要一个真实对象来完成这些增删改查操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//真实对象，完成增删改查操作的人</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;更新了一个用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>需求来了，现在我们需要增加一个日志功能，怎么实现！</p><ul><li>思路1 ：在实现类上增加代码 【麻烦！】</li><li>思路2：使用代理来做，能够不改变原来的业务情况下，实现此功能就是最好的了！</li></ul></li><li><p>设置一个代理类来处理日志！代理角色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理角色，在这里面增加日志的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserServiceImpl userService)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.userService = userService;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">       userService.add();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       log(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">       userService.delete();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       log(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">       userService.update();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       log(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">       userService.query();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;执行了&quot;</span>+msg+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试访问类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//真实业务</span></span><br><span class="line">       UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//代理类</span></span><br><span class="line">       UserServiceProxy proxy = <span class="keyword">new</span> UserServiceProxy();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//使用代理类实现日志功能！</span></span><br><span class="line">       proxy.setUserService(userService);</span><br><span class="line"></span><br><span class="line">       proxy.add();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想</p></blockquote></li></ol><p><strong>AOP：纵向开发，横向开发！！</strong></p><p><img src="https://images.mmzi.online//blog/202208252208629.png" alt="image-20210218175041254"></p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul><li>动态代理的角色和静态代理的一样。</li><li>动态代理的代理类是动态生成的，静态代理的代理类是我们提前写好的。</li><li>动态代理分为两类 : 一类是基于接口动态代理 , 一类是基于类的动态代理。<ul><li>基于接口的动态代理—-JDK动态代理</li><li>基于类的动态代理–cglib</li><li>现在用的比较多的是 javasist 来生成动态代理 . 百度一下javasist</li><li>我们这里使用JDK的原生代码来实现，其余的道理都是一样的！</li></ul></li></ul><blockquote><p>JDK的动态代理需要两个类</p></blockquote><p>核心 : InvocationHandler 和 Proxy ，打开JDK帮助文档看看</p><p>【InvocationHandler：调用处理程序】</p><p><img src="https://images.mmzi.online//blog/202208252208650.png" alt="image-20210218175336048"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object invoke(Object proxy, 方法 method, Object[] args)；</span><br><span class="line">&#x2F;&#x2F;参数</span><br><span class="line">&#x2F;&#x2F;proxy - 调用该方法的代理实例</span><br><span class="line">&#x2F;&#x2F;method -所述方法对应于调用代理实例上的接口方法的实例。方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。</span><br><span class="line">&#x2F;&#x2F;args -包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean 。</span><br></pre></td></tr></table></figure><p>【Proxy  : 代理】</p><p><img src="https://images.mmzi.online//blog/202208252208695.png" alt="image-20210218175412951"></p><p><img src="https://images.mmzi.online//blog/202208252208153.png" alt="image-20210218175421478"></p><p><img src="https://images.mmzi.online//blog/202208252209598.png" alt="image-20210218175432297"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成代理类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                                 rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>抽象角色和真实角色和之前的一样！<br>Rent . java 即抽象角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象角色：租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Host . java 即真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//真实角色: 房东，房东要出租房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;房屋出租&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProxyInvocationHandler. java 即代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.rent = rent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//生成代理类，重点是第二个参数，获取要代理的抽象角色！之前都是一个角色，现在可以代理一类角色(通过反射获取接口实现的方法)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">               rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// proxy : 代理类 method : 代理类的调用处理程序的方法对象.</span></span><br><span class="line">   <span class="comment">// 处理代理实例上的方法调用并返回结果</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       seeHouse();</span><br><span class="line">       <span class="comment">//核心：本质利用反射实现！</span></span><br><span class="line">       Object result = method.invoke(rent, args);</span><br><span class="line">       fare();</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//看房</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;带房客看房&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//收中介费</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//租客</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//真实角色</span></span><br><span class="line">       Host host = <span class="keyword">new</span> Host();</span><br><span class="line">       <span class="comment">//代理实例的调用处理程序</span></span><br><span class="line">       ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">       pih.setRent(host); <span class="comment">//将真实角色放置进去！</span></span><br><span class="line">       Rent proxy = (Rent)pih.getProxy(); <span class="comment">//动态生成对应的代理类！</span></span><br><span class="line">       proxy.rent();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>核心：一个动态代理 , 一般代理某一类业务 , 一个动态代理可以代理多个类，代理的是接口！</p></blockquote><h3 id="深化理解动态代理"><a href="#深化理解动态代理" class="headerlink" title="深化理解动态代理"></a>深化理解动态代理</h3><p>我们来使用动态代理实现代理我们后面写的UserService！<br>我们也可以编写一个通用的动态代理实现的类！所有的代理对象设置为Object即可！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.target = target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//生成代理类</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">               target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// proxy : 代理类</span></span><br><span class="line">   <span class="comment">// method : 代理类的调用处理程序的方法对象.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       log(method.getName());</span><br><span class="line">       Object result = method.invoke(target, args);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String methodName)</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;执行了&quot;</span>+methodName+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//真实对象</span></span><br><span class="line">       UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//代理对象的调用处理程序</span></span><br><span class="line">       ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">       pih.setTarget(userService); <span class="comment">//设置要代理的对象</span></span><br><span class="line"></span><br><span class="line">       UserService proxy = (UserService)pih.getProxy(); <span class="comment">//动态生成代理类！</span></span><br><span class="line"></span><br><span class="line">       proxy.delete();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理的好处："><a href="#动态代理的好处：" class="headerlink" title="动态代理的好处："></a>动态代理的好处：</h3><ul><li>静态代理有的它都有，静态代理没有的，它也有。</li><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 。</li><li>公共的业务由代理来完成 . 实现了业务的分工。 </li><li>公共业务发生扩展时变得更加集中和方便 。</li><li>一个动态代理 , 一般代理某一类业务。</li><li>一个动态代理可以代理多个类，代理的是接口。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;为什么要学习代理模式，因为AOP的底层机制就是动态代理！&lt;br&gt;代理模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态代理&lt;/li&gt;
&lt;li&gt;动态代理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学习aop之前 , 我们要先了解一下代理模式！</summary>
    
    
    
    <category term="Spring" scheme="https://dyasher.github.io/categories/Spring/"/>
    
    <category term="SSM框架学习" scheme="https://dyasher.github.io/categories/Spring/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://dyasher.github.io/tags/Spring/"/>
    
    <category term="AOP" scheme="https://dyasher.github.io/tags/AOP/"/>
    
    <category term="代理模式" scheme="https://dyasher.github.io/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习——配置数据源</title>
    <link href="https://dyasher.github.io/2021/02/18/Spring%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>https://dyasher.github.io/2021/02/18/Spring%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/</id>
    <published>2021-02-18T08:55:11.000Z</published>
    <updated>2021-02-18T09:17:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传统数据源配置"><a href="#传统数据源配置" class="headerlink" title="传统数据源配置"></a>传统数据源配置</h1><h2 id="数据源（连接池）的作用："><a href="#数据源（连接池）的作用：" class="headerlink" title="数据源（连接池）的作用："></a>数据源（连接池）的作用：</h2><ol><li>数据源(连接池)是提高程序性能如出现的</li><li>事先实例化数据源，初始化部分连接资源</li><li>使用连接资源时从数据源中获取<a id="more"></a></li><li>使用完毕后将连接资源归还给数据源</li><li> 常见的数据源(连接池)：DBCP、C3P0、BoneCP、Druid等</li></ol><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li>导入数据源的坐标和数据库驱动坐标</li><li>创建数据源对象</li><li>设置数据源的基本连接数据</li><li>使用数据源获取连接资源和归还连接资源 </li></ol><h2 id="数据源手动创建"><a href="#数据源手动创建" class="headerlink" title="数据源手动创建"></a>数据源手动创建</h2><h3 id="导入坐标"><a href="#导入坐标" class="headerlink" title="导入坐标"></a>导入坐标</h3><ol><li><p>导入c3p0和druid的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>导入mysql数据库驱动坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="代码配置"><a href="#代码配置" class="headerlink" title="代码配置"></a>代码配置</h3></li><li><p>创建C3P0连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//测试手动创建c3p0数据源</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">        dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Druid连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//测试手动创建druid数据源</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DruidPooledConnection connection = dataSource.getConnection();</span><br><span class="line">            System.out.println(connection);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="引用配置文件"><a href="#引用配置文件" class="headerlink" title="引用配置文件"></a>引用配置文件</h3></li><li><p>提取jdbc.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver </span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root </span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>读取jdbc.properties配置文件创建连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//测试手动创建c3p0数据源（加载配置文件properties）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line"></span><br><span class="line">        ResourceBundle rb = ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">        String driver = rb.getString(<span class="string">&quot;jdbc.driver&quot;</span>);</span><br><span class="line">        String url = rb.getString(<span class="string">&quot;jdbc.url&quot;</span>);</span><br><span class="line">        String username = rb.getString(<span class="string">&quot;jdbc.username&quot;</span>);</span><br><span class="line">        String password = rb.getString(<span class="string">&quot;jdbc.password&quot;</span>);</span><br><span class="line">        <span class="comment">//创建数据源对象，设置连接参数</span></span><br><span class="line"></span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource.setDriverClass(driver);</span><br><span class="line">            dataSource.setJdbcUrl(url);</span><br><span class="line">            dataSource.setUser(username);</span><br><span class="line">            dataSource.setPassword(password);</span><br><span class="line">            Connection connection = dataSource.getConnection();</span><br><span class="line">            System.out.println(connection);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PropertyVetoException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Spring配置数据源"><a href="#Spring配置数据源" class="headerlink" title="Spring配置数据源"></a>Spring配置数据源</h1></li></ol><p>可以将DataSource的创建权交由Spring容器去完成 DataSource有无参构造方法，而Spring默认就是通过无参构造方法实例化对象的。</p><p>DataSource要想使用需要通过set方法设置数据库连接信息，而Spring可以通过set方法进行字符串注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试从容器中获取数据源"><a href="#测试从容器中获取数据源" class="headerlink" title="测试从容器中获取数据源"></a>测试从容器中获取数据源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//测试Spring容器产生数据源对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ApplicationContext app =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        DataSource dataSource = app.getBean(DataSource.class);</span><br><span class="line">        Connection connection =dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="抽取jdbc配置文件"><a href="#抽取jdbc配置文件" class="headerlink" title="抽取jdbc配置文件"></a>抽取jdbc配置文件</h2><p>applicationContext.xml加载jdbc.properties配置文件获得连接信息</p><h2 id="首先，需要引入context命名空间和约束路径："><a href="#首先，需要引入context命名空间和约束路径：" class="headerlink" title="首先，需要引入context命名空间和约束路径："></a>首先，需要引入context命名空间和约束路径：</h2><p>命名空间：xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;">http://www.springframework.org/schema/context&quot;</a><br>约束路径：<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a>  <a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a></p><h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><p>Spring容器加载properties文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;xx.properties&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;key&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;传统数据源配置&quot;&gt;&lt;a href=&quot;#传统数据源配置&quot; class=&quot;headerlink&quot; title=&quot;传统数据源配置&quot;&gt;&lt;/a&gt;传统数据源配置&lt;/h1&gt;&lt;h2 id=&quot;数据源（连接池）的作用：&quot;&gt;&lt;a href=&quot;#数据源（连接池）的作用：&quot; class=&quot;headerlink&quot; title=&quot;数据源（连接池）的作用：&quot;&gt;&lt;/a&gt;数据源（连接池）的作用：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;数据源(连接池)是提高程序性能如出现的&lt;/li&gt;
&lt;li&gt;事先实例化数据源，初始化部分连接资源&lt;/li&gt;
&lt;li&gt;使用连接资源时从数据源中获取</summary>
    
    
    
    <category term="Spring" scheme="https://dyasher.github.io/categories/Spring/"/>
    
    <category term="SSM框架学习" scheme="https://dyasher.github.io/categories/Spring/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://dyasher.github.io/tags/Spring/"/>
    
    <category term="注解开发" scheme="https://dyasher.github.io/tags/%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习——注解开发</title>
    <link href="https://dyasher.github.io/2021/02/18/Spring%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
    <id>https://dyasher.github.io/2021/02/18/Spring%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</id>
    <published>2021-02-18T08:14:48.000Z</published>
    <updated>2021-02-18T08:53:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h1><h2 id="Spring原始注解"><a href="#Spring原始注解" class="headerlink" title="Spring原始注解"></a>Spring原始注解</h2><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文 件可以简化配置，提高开发效率。</p><p><strong>Spring原始注解主要是替代的配置</strong><a id="more"></a></p><table><thead><tr><th>注解</th><th align="left">说明</th></tr></thead><tbody><tr><td></td><td align="left"><strong>实例化Bean</strong></td></tr><tr><td>@Component</td><td align="left">使用在类上用于实例化Bean</td></tr><tr><td>@Controller</td><td align="left">使用在web层类上用于实例化Bean</td></tr><tr><td>@Service</td><td align="left">使用在service层类上用于实例化Bean</td></tr><tr><td>@Repository</td><td align="left">使用在dao层类上用于实例化Bean</td></tr><tr><td></td><td align="left"><strong>依赖注入</strong></td></tr><tr><td>@Autowired</td><td align="left">使用在字段上用于根据类型依赖注入</td></tr><tr><td>@Qualiﬁer</td><td align="left">结合@Autowired一起使用用于根据名称进行依赖注入Qualifier(“userDao”)</td></tr><tr><td>@Resource</td><td align="left">相当于@Autowired+@Qualiﬁer，按照名称进行注入@Resource(name=”userDao”)</td></tr><tr><td></td><td align="left"><strong>其他注入</strong></td></tr><tr><td>@Value</td><td align="left">注入普通属性</td></tr><tr><td>@Value</td><td align="left">标注Bean的作用范围</td></tr><tr><td>@PostConstruct</td><td align="left">使用在方法上标注该方法是Bean的初始化方法</td></tr><tr><td>@PreDestroy</td><td align="left">使用在方法上标注该方法是Bean的销毁方法</td></tr></tbody></table><blockquote><p>使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean需要 进行扫描以便识别使用注解配置的类、字段和方法。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解的组件扫描--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用@Compont或@Repository标识UserDaoImpl需要Spring进行实例化。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sava running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用@Compont或@Service标识UserServiceImpl需要Spring进行实例化</strong><br><strong>使用@Autowired或者@Autowired+@Quliﬁer或者@Resource进行userDao的注入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UerServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="comment">//    @Autowired //按照数据类型从Spring容器中进行匹配的</span></span><br><span class="line">    <span class="comment">//    @Qualifier(&quot;userDao&quot;) //按照id值从容器中进行匹配的，但时主要此处要结合@Autowired使用</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;userDao&quot;)</span> <span class="comment">//相当于@Autowired + @Qualifier</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sava</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(driver);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用@Value进行字符串的注入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UerServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用@Scope标注Bean的范围</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UerServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用@PostConstruct标注初始化方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>使用@PreDestroy标注销毁方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Spring新注解"><a href="#Spring新注解" class="headerlink" title="Spring新注解"></a>Spring新注解</h2><p><strong>新注解</strong><br>使用上面的注解还不能全部替代xml配置文件，还需要使用注解替代的配置。 </p><p><strong>非自定义的Bean的配置：</strong></p><ul><li>加载properties文件的配置：context:property-placeholder </li><li>组件扫描的配置：context:component-scan</li></ul><p><strong>引入其他文件</strong></p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Conﬁguration</td><td>用于指定当前类是一个 Spring 配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定 Spring 在初始化容器时要扫描的包。 作用和在 Spring 的 xml 配置文件中 的 &lt;context:component-scan base-package=”com.itheima”/&gt;一样</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到 Spring 容器中</td></tr><tr><td>@PropertySource</td><td>用于加载.properties 文件中的配置</td></tr><tr><td>@Import</td><td>用于导入其他配置类</td></tr></tbody></table><p><strong>@Conﬁguration</strong><br><strong>@ComponentScan</strong><br><strong>@Import</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标志该类是Spring的核心配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//&lt;context:component-scan base-package=&quot;com.itheima&quot;/&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">//&lt;import resource=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Import(&#123;DataSourceConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@PropertySource</strong><br><strong>@value</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String driver;</span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String url;</span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String username;</span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(driver);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>测试加载核心配置类创建Spring容器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.sava();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println( dataSource.getConnection());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring整合Junit"><a href="#Spring整合Junit" class="headerlink" title="Spring整合Junit"></a>Spring整合Junit</h2><p><strong>整合Junit</strong><br><strong>原始Junit测试Spring的问题</strong><br>在测试类中，每个测试方法都有以下两行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>); </span><br><span class="line">IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br></pre></td></tr></table></figure><blockquote><p>这两行代码的作用是获取容器，如果不写的话，直接会提示空指针异常。所以又不能轻易删掉</p></blockquote><p><strong>上述问题解决思路</strong></p><ul><li>让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉它 </li><li>将需要进行测试Bean直接在测试类中进行注入 </li></ul><p><strong>Spring集成Junit步骤</strong> </p><ol><li>导入spring集成Junit的坐标</li><li>使用@Runwith注解替换原来的运行期 </li><li>使用@ContextConﬁguration指定配置文件或配置类</li><li>使用@Autowired注入需要测试的对象</li><li>创建测试方法进行测试</li></ol><p><strong>导入spring集成Junit的坐标</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用@Runwith注解替换原来的运行期</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用@ContextConﬁguration指定配置文件或配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> </span><br><span class="line"><span class="comment">//加载spring核心配置文件 </span></span><br><span class="line"><span class="comment">//@ContextConfiguration(value = &#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span></span><br><span class="line"><span class="comment">//加载spring核心配置类 </span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用@Autowired注入需要测试的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> </span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;  </span><br><span class="line">      <span class="meta">@Autowired</span>  </span><br><span class="line">      <span class="keyword">private</span> UserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建测试方法进行测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> </span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">         <span class="keyword">private</span> UserService userService;</span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.save();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring注解开发&quot;&gt;&lt;a href=&quot;#Spring注解开发&quot; class=&quot;headerlink&quot; title=&quot;Spring注解开发&quot;&gt;&lt;/a&gt;Spring注解开发&lt;/h1&gt;&lt;h2 id=&quot;Spring原始注解&quot;&gt;&lt;a href=&quot;#Spring原始注解&quot; class=&quot;headerlink&quot; title=&quot;Spring原始注解&quot;&gt;&lt;/a&gt;Spring原始注解&lt;/h2&gt;&lt;p&gt;Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文 件可以简化配置，提高开发效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring原始注解主要是替代的配置&lt;/strong&gt;</summary>
    
    
    
    <category term="Spring" scheme="https://dyasher.github.io/categories/Spring/"/>
    
    <category term="SSM框架学习" scheme="https://dyasher.github.io/categories/Spring/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://dyasher.github.io/tags/Spring/"/>
    
    <category term="注解开发" scheme="https://dyasher.github.io/tags/%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习——自动装配</title>
    <link href="https://dyasher.github.io/2021/02/18/Spring%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>https://dyasher.github.io/2021/02/18/Spring%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</id>
    <published>2021-02-18T07:51:37.000Z</published>
    <updated>2021-02-18T08:07:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动装配说明"><a href="#自动装配说明" class="headerlink" title="自动装配说明"></a>自动装配说明</h2><ul><li>自动装配是使用spring满足bean依赖的一种方法。</li><li>spring会在应用上下文中为某个bean寻找其依赖的bean。</li></ul><p>Spring中bean有三种装配机制，分别是：<br>     1. 在xml中显式配置（基于xml配置文件）；<a id="more"></a><br>     2. 隐式的bean发现机制和自动装配（基于自动装配）。<br>     3. 在java中显式配置（基于注解方式）；</p><p>​    </p><blockquote><p>这里我们主要讲第三种：自动化的装配bean。</p></blockquote><p>Spring的自动装配需要从两个角度来实现，或者说是两个操作：</p><ul><li>组件扫描(component scanning)：spring会自动发现应用上下文中所创建的bean；</li><li>自动装配(autowiring)：spring自动满足bean之间的依赖，也就是我们说的IoC/DI；</li></ul><blockquote><p>组件扫描和自动装配组合发挥巨大威力，使得显示的配置降低到最少。</p></blockquote><p>推荐不使用自动装配xml配置，使用注解。</p><p>测试环境搭建</p><ol><li><p>新建一个项目</p></li><li><p>新建两个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;miao~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;wang~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建一个用户类User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Cat cat;</span><br><span class="line">   <span class="keyword">private</span> Dog dog;</span><br><span class="line">   <span class="keyword">private</span> String str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写Spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;qinjiang&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethodAutowire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">       User user = (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">       user.getCat().shout();</span><br><span class="line">       user.getDog().shout();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h2></li></ol><p><strong>autowire byName (按名称自动装配)</strong></p><p>由于在手动配置xml过程中，常常发生字母缺漏和大小写等错误，而无法对其进行检查，使得开发效率降低。<br>采用自动装配将避免这些错误，并且使配置简单化。</p><p><strong>测试</strong></p><ol><li><p>修改bean配置，增加一个属性  autowire=”byName”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;qinjiang&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>再次测试，结果依旧成功</p></li><li><p>我们将cat的bean ID改为catXXX</p></li><li><p>再次测试， 执行时报空指针java.lang.NullPointerException。因为按byName规则找不对应set方法，真正的setCat就没执行，对象就没有初始化，所以调用时就会报空指针错误。</p></li></ol><h2 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h2><p><strong>autowire byType (按类型自动装配)</strong></p><p>使用autowire byType首先需要保证：同一类型的对象，在spring容器中唯一。如果不唯一，会报不唯一的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NoUniqueBeanDefinitionException</span><br></pre></td></tr></table></figure><p>测试</p><ol><li><p>将user的bean配置修改一下 ： autowire=”byType”</p></li><li><p>测试，正常输出</p></li><li><p>在注册一个cat 的bean对象！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;qinjiang&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试，报错：NoUniqueBeanDefinitionException</p></li><li><p> 删掉cat2，将cat的bean名称改掉！测试！因为是按类型装配，所以并不会报异常，也不影响最后的结果。甚至将id属性去掉，也不影响结果。</p></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><strong>当一个bean节点带有 autowire byName的属性时。</strong></p><pre><code> 1. 将查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。 2. 去spring容器中寻找是否有此字符串名称id的对象。 3. 如果有，就取出注入；如果没有，就报空指针异常。</code></pre><p><strong>当一个bean节点带有 autowire byType的属性时。</strong></p><pre><code>1. 需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;自动装配说明&quot;&gt;&lt;a href=&quot;#自动装配说明&quot; class=&quot;headerlink&quot; title=&quot;自动装配说明&quot;&gt;&lt;/a&gt;自动装配说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;自动装配是使用spring满足bean依赖的一种方法。&lt;/li&gt;
&lt;li&gt;spring会在应用上下文中为某个bean寻找其依赖的bean。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring中bean有三种装配机制，分别是：&lt;br&gt;     1. 在xml中显式配置（基于xml配置文件）；</summary>
    
    
    
    <category term="Spring" scheme="https://dyasher.github.io/categories/Spring/"/>
    
    <category term="SSM框架学习" scheme="https://dyasher.github.io/categories/Spring/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://dyasher.github.io/tags/Spring/"/>
    
    <category term="自动装配" scheme="https://dyasher.github.io/tags/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习——依赖注入（DI）</title>
    <link href="https://dyasher.github.io/2021/02/18/Spring%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89/"/>
    <id>https://dyasher.github.io/2021/02/18/Spring%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89/</id>
    <published>2021-02-18T07:02:13.000Z</published>
    <updated>2022-08-25T14:10:24.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="依赖注入（DI）入门"><a href="#依赖注入（DI）入门" class="headerlink" title="依赖注入（DI）入门"></a>依赖注入（DI）入门</h1><ol><li><p>创建 UserService，UserService 内部在调用 UserDao的save() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">           UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">            userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将 UserServiceImpl 的创建权交给 Spring<a id="more"></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>从 Spring 容器中获得 UserService 进行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span>??ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">userDao.save(); </span><br></pre></td></tr></table></figure><h1 id="Bean的依赖注入"><a href="#Bean的依赖注入" class="headerlink" title="Bean的依赖注入"></a>Bean的依赖注入</h1></li></ol><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li>依赖注入（Dependency Injection）：它是 Spring 框架核心 IOC 的具体实现。 </li><li>在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。</li><li>IOC 解耦只是降低他们的依赖关系，但不会消除。例如：业务层仍会调用持久层的方法。</li><li>那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。</li><li>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取 。</li></ol><h2 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a>注入方式</h2><ol><li>构造注入</li><li>设值注入</li></ol><h3 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h3><p><strong>创建有参构造</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置Spring容器用有参构造时进行注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="设值注入"><a href="#设值注入" class="headerlink" title="设值注入"></a>设值注入</h3><p><strong>注入数据的三种数据类型</strong></p><ol><li>普通数据类型</li><li>引用数据类型</li><li>集合数据类型（List、Map、Properties）</li></ol><p><strong>在UserServiceImpl中添加setUserDao方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> UserDao userDao; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">                  <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">         &#125;  </span><br><span class="line">        <span class="meta">@Override</span> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123; </span><br><span class="line">                 userDao.save();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>配置Spring容器调用set方法进行注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span> </span><br><span class="line">&lt;/bean</span><br></pre></td></tr></table></figure><blockquote><p>要求被注入的属性 , 必须有set方法 , set方法的方法名由set + 属性首字母大写 , 如果属性是boolean类型 , 没有set方法 , 是 is </p></blockquote><p><strong>测试pojo类 :</strong><br>Address.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.asher.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line">     <span class="keyword">private</span> Address address;</span><br><span class="line">     <span class="keyword">private</span> String[] books;</span><br><span class="line">     <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">     <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">     <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">     <span class="keyword">private</span> String wife;</span><br><span class="line">     <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooks</span><span class="params">(String[] books)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbys</span><span class="params">(List&lt;String&gt; hobbys)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.hobbys = hobbys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCard</span><span class="params">(Map&lt;String, String&gt; card)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGames</span><span class="params">(Set&lt;String&gt; games)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(String wife)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(Properties info)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;name=&quot;</span>+ name</span><br><span class="line">                 + <span class="string">&quot;,address=&quot;</span>+ address.getAddress()</span><br><span class="line">                 + <span class="string">&quot;,books=&quot;</span></span><br><span class="line">        );</span><br><span class="line">         <span class="keyword">for</span> (String book:books)&#123;</span><br><span class="line">             System.out.print(<span class="string">&quot;&lt;&lt;&quot;</span>+book+<span class="string">&quot;&gt;&gt;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         System.out.println(<span class="string">&quot;\n爱好:&quot;</span>+hobbys);</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="string">&quot;card:&quot;</span>+card);</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="string">&quot;games:&quot;</span>+games);</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="string">&quot;wife:&quot;</span>+wife);</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="string">&quot;info:&quot;</span>+info);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><strong>常量注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">     ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">     Student student = (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">     System.out.println(student.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Bean注入</strong></p><p><strong>注意点：</strong>这里的值是一个引用，ref。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重庆&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;addr&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;addr&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>List注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>爬山<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Map注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;中国邮政&quot;</span> <span class="attr">value</span>=<span class="string">&quot;456456456465456&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;建设&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1456682255511&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>set注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Null注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Properties注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>20190604<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试结果</strong></p><p><img src="https://images.mmzi.online//blog/202208252210541.png" alt="image-202102181531312612"></p></li></ol><h3 id="p命名和c命名注入"><a href="#p命名和c命名注入" class="headerlink" title="p命名和c命名注入"></a>p命名和c命名注入</h3><p><img src="https://images.mmzi.online//blog/202208252210678.png" alt="image-20210218151820069"></p><h4 id="P命名空间注入"><a href="#P命名空间注入" class="headerlink" title="P命名空间注入"></a>P命名空间注入</h4><p>P命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，简化property name=”userDao”为p:userDao主要体现在配置文件中，如下：<br><strong>首先，需要引入P命名空间</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure><p><strong>其次，需要修改注入方式</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:userDao</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="C命名空间注入"><a href="#C命名空间注入" class="headerlink" title="C命名空间注入"></a>C命名空间注入</h4><p>本质是构造注入</p><p><strong>首先，需要引入P命名空间</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure><p><strong>其次，需要修改注入方式</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.asher.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;Asher&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 发现问题：爆红了，刚才我们没有写有参构造！</p></blockquote><p><strong>解决：</strong>把有参构造器加上，这里也能知道，c 就是所谓的构造器注入！<br><strong>测试代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">     ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">     User user = (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">     System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;依赖注入（DI）入门&quot;&gt;&lt;a href=&quot;#依赖注入（DI）入门&quot; class=&quot;headerlink&quot; title=&quot;依赖注入（DI）入门&quot;&gt;&lt;/a&gt;依赖注入（DI）入门&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建 UserService，UserService 内部在调用 UserDao的save() 方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserServiceImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	           ApplicationContext applicationContext = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&lt;span class=&quot;string&quot;&gt;&amp;quot;applicationContext.xml&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	           UserDao userDao = (UserDao) applicationContext.getBean(&lt;span class=&quot;string&quot;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            userDao.save();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将 UserServiceImpl 的创建权交给 Spring</summary>
    
    
    
    <category term="Spring" scheme="https://dyasher.github.io/categories/Spring/"/>
    
    <category term="SSM框架学习" scheme="https://dyasher.github.io/categories/Spring/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://dyasher.github.io/tags/Spring/"/>
    
    <category term="依赖注入" scheme="https://dyasher.github.io/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
    <category term="DI" scheme="https://dyasher.github.io/tags/DI/"/>
    
  </entry>
  
</feed>
